includes/command_line/sh_command_line.h:9:/*   Updated: 2019/07/18 09:25:34 by ede-ram          ###   ########.fr       */
includes/tools/sh_tools.h:9:/*   Updated: 2019/09/02 09:23:01 by ede-ram          ###   ########.fr       */
libshutil/srcs/sh_check_path.c:9:	if (stat(path, &s) == -1)
libshutil/srcs/sh_check_path.c:19:	if (c != '\0' && access(path, mode) == -1)
libshutil/srcs/sh_check_path.c:36:		exit(-1);
libshutil/srcs/sh_mv.c:3:	write(2, "mv: illegal option -- ", 23);
libshutil/srcs/sh_mv.c:5:	write(2,"\nusage: mv [-f | -i | -n] [-v] source targe", 43);
libshutil/srcs/sh_mv.c:6:	write(2, "\n\tmv [-f | -i | -n] [-v] source ... directory\n", 46);
libshutil/srcs/sh_mv.c:7:	return (-1);
libshutil/srcs/sh_mv.c:29:	while (av[*i][0] == '-')
libshutil/srcs/sh_mv.c:31:		if (ft_strcmp(av[*i], "--") == 0)
libshutil/srcs/sh_mv.c:35:			if (av[*i][j] != '-' && av[*i][j] != 'b' && av[*i][j] != 'f'
libshutil/srcs/sh_mv.c:52:	if ((opt = sh_find_opt(av, &i)) == -1)
libshutil/srcs/sh_mv.c:53:		return (-1);
libshutil/srcs/sh_rmdir.c:6:	while (av[*i][0] == '-')
libshutil/srcs/sh_rmdir.c:8:		if (ft_strcmp(av[*i], "--") == 0)
libshutil/srcs/sh_rmdir.c:12:			if (av[*i][j] != '-' && av[*i][j] != 'b' && av[*i][j] != 'f'
libshutil/srcs/sh_rmdir.c:50:	if (sh_check_path(path, error) == -1)
libshutil/srcs/sh_set.c:20:	ft_putendl("Shell: libshutil: sh_set.c\n---");
libshutil/srcs/sh_set.c:27:			ft_putstr(params->key);
libshutil/srcs/sh_set.c:29:			if (params->value)
libshutil/srcs/sh_set.c:30:				ft_putstr(params->value);
libshutil/srcs/sh_set.c:32:			params = params->next;
srcs/builtins/sh_alias.c:60:	while (!alias && sh()->aliases && sh()->aliases[i])
srcs/builtins/sh_alias.c:61:		print_alias(flag, sh()->aliases[i++]);
srcs/builtins/sh_alias.c:65:	while (sh()->aliases && sh()->aliases[i]
srcs/builtins/sh_alias.c:66:			&& ft_strncmp_n(sh()->aliases[i], alias, j))
srcs/builtins/sh_alias.c:68:	if (sh()->aliases && sh()->aliases[i])
srcs/builtins/sh_alias.c:69:		return (print_alias(flag, sh()->aliases[i]));
srcs/builtins/sh_alias.c:88:			if (!replace_alias(sh()->aliases, av[i]))
srcs/builtins/sh_alias.c:89:				if (!(sh()->aliases = tab_realloc(sh()->aliases, av[i])))
srcs/builtins/sh_alias.c:113:			ft_putstr_fd("42sh: alias: -", 2);
srcs/builtins/sh_alias.c:116:					"alias [-p] [name[=value] ... ]\n", 2);
srcs/builtins/sh_alias.c:133:		if (av[i][0] == '-' && av[i][1] != 0)
srcs/builtins/sh_cd.c:23:		tmp->exported = 1;
srcs/builtins/sh_cd.c:25:		tmp->exported = 1;
srcs/builtins/sh_cd.c:78:	else if (ac >= 2 && !ft_strcmp(av[1], "-"))
srcs/builtins/sh_cd.c:80:	//else if (ac >= 2 && !ft_strcmp(av[1], "-L"))
srcs/builtins/sh_cd.c:82:	//else if (ac >= 2 && !ft_strcmp(av[1], "-P"))
srcs/builtins/sh_check_path.c:21:	if (stat(path, &s) == -1)
srcs/builtins/sh_check_path.c:31:	if (c != '\0' && access(path, mode) == -1)
srcs/builtins/sh_check_path.c:46:		exit(-1);
srcs/builtins/sh_echo.c:20:		write(1, *handle, tmp - *handle);
srcs/builtins/sh_env.c:27:			if (params->exported)
srcs/builtins/sh_env.c:29:				ft_putstr(params->key);
srcs/builtins/sh_env.c:31:				if (params->value)
srcs/builtins/sh_env.c:32:					ft_putstr(params->value);
srcs/builtins/sh_env.c:35:			params = params->next;
srcs/builtins/sh_export.c:24:		if (params->exported)
srcs/builtins/sh_export.c:27:			ft_putstr(params->key);
srcs/builtins/sh_export.c:28:			if (params->value)
srcs/builtins/sh_export.c:31:				ft_putstr(params->value);
srcs/builtins/sh_export.c:36:		params = params->next;
srcs/builtins/sh_export.c:46:	if (ac == 1 || (ac == 2 && !ft_strcmp(av[1], "-p")))
srcs/builtins/sh_export.c:53:				tmp = ft_strndup(av[i], tmp - av[i]);
srcs/builtins/sh_export.c:54:				sh_setenv(tmp, ft_strchr(av[i], '=') + 1)->exported = 1;
srcs/builtins/sh_export.c:57:				sh_setenv(av[i], NULL)->exported = 1;
srcs/builtins/sh_mv.c:15:	write(2, "mv: illegal option -- ", 23);
srcs/builtins/sh_mv.c:17:	write(2,"\nusage: mv [-f | -i | -n] [-v] source targe", 43);
srcs/builtins/sh_mv.c:18:	write(2, "\n\tmv [-f | -i | -n] [-v] source ... directory\n", 46);
srcs/builtins/sh_mv.c:19:	return (-1);
srcs/builtins/sh_mv.c:41:	while (av[*i][0] == '-')
srcs/builtins/sh_mv.c:43:		if (ft_strcmp(av[*i], "--") == 0)
srcs/builtins/sh_mv.c:47:			if (av[*i][j] != '-' && av[*i][j] != 'b' && av[*i][j] != 'f'
srcs/builtins/sh_mv.c:64:	if ((opt = sh_find_opt(av, &i)) == -1)
srcs/builtins/sh_mv.c:65:		return (-1);
srcs/builtins/sh_readonly.c:24:		if (params->readonly)
srcs/builtins/sh_readonly.c:27:			ft_putstr(params->key);
srcs/builtins/sh_readonly.c:28:			if (params->value)
srcs/builtins/sh_readonly.c:31:				ft_putstr(params->value);
srcs/builtins/sh_readonly.c:36:		params = params->next;
srcs/builtins/sh_readonly.c:46:	if (ac == 1 || (ac == 2 && !ft_strcmp(av[1], "-p")))
srcs/builtins/sh_readonly.c:53:				tmp = ft_strndup(av[i], tmp - av[i]);
srcs/builtins/sh_readonly.c:54:				sh_setenv(tmp, ft_strchr(av[i], '=') + 1)->readonly = 1;
srcs/builtins/sh_readonly.c:57:				sh_setenv(av[i], NULL)->readonly = 1;
srcs/builtins/sh_rmdir.c:18:	while (av[*i][0] == '-')
srcs/builtins/sh_rmdir.c:20:		if (ft_strcmp(av[*i], "--") == 0)
srcs/builtins/sh_rmdir.c:24:			if (av[*i][j] != '-' && av[*i][j] != 'b' && av[*i][j] != 'f'
srcs/builtins/sh_rmdir.c:62:	if (sh_check_path(path, error) == -1)
srcs/builtins/sh_set.c:23:		ft_putstr(params->key);
srcs/builtins/sh_set.c:25:		if (params->value)
srcs/builtins/sh_set.c:26:			ft_putstr(params->value);
srcs/builtins/sh_set.c:28:		params = params->next;
srcs/builtins/sh_set.c:47:		tmp2 = ft_strndup(av[i], tmp - av[i]);
srcs/builtins/sh_test.c:30:	else if (!ft_strcmp(s1, "-z") && (!s2 || !*s2))
srcs/builtins/sh_test.c:32:	else if (!ft_strcmp(s1, "-b") && !lstat(s2, &pstat) && (pstat.st_mode & S_IFMT) == S_IFBLK)
srcs/builtins/sh_test.c:34:	else if (!ft_strcmp(s1, "-c") && !lstat(s2, &pstat) && (pstat.st_mode & S_IFMT) == S_IFCHR)
srcs/builtins/sh_test.c:36:	else if (!ft_strcmp(s1, "-d") && !lstat(s2, &pstat) && (pstat.st_mode & S_IFMT) == S_IFDIR)
srcs/builtins/sh_test.c:38:	else if (!ft_strcmp(s1, "-e") && !lstat(s2, &pstat))
srcs/builtins/sh_test.c:40:	else if (!ft_strcmp(s1, "-f") && !lstat(s2, &pstat) && (pstat.st_mode & S_IFMT) == S_IFREG)
srcs/builtins/sh_test.c:42:	else if (!ft_strcmp(s1, "-n") && ft_strlen(s2) > 0)
srcs/builtins/sh_test.c:44:	else if (!ft_strcmp(s1, "-p") && !lstat(s2, &pstat) && (pstat.st_mode & S_IFMT) == S_IFIFO)
srcs/builtins/sh_test.c:46:	else if (!ft_strcmp(s1, "-S") && !lstat(s2, &pstat) && (pstat.st_mode & S_IFMT) == S_IFSOCK)
srcs/builtins/sh_test.c:48:	else if (!ft_strcmp(s1, "-s") && !lstat(s2, &pstat) && pstat.st_size > 0)
srcs/builtins/sh_test.c:66:	else if (!ft_strcmp(s2, "-eq") && ft_atoi(s1) == ft_atoi(s3))
srcs/builtins/sh_test.c:68:	else if (!ft_strcmp(s2, "-ne") && ft_atoi(s1) != ft_atoi(s3))
srcs/builtins/sh_test.c:70:	else if (!ft_strcmp(s2, "-gt") && ft_atoi(s1) > ft_atoi(s3))
srcs/builtins/sh_test.c:72:	else if (!ft_strcmp(s2, "-ge") && ft_atoi(s1) >= ft_atoi(s3))
srcs/builtins/sh_test.c:74:	else if (!ft_strcmp(s2, "-lt") && ft_atoi(s1) < ft_atoi(s3))
srcs/builtins/sh_test.c:76:	else if (!ft_strcmp(s2, "-le") && ft_atoi(s1) <= ft_atoi(s3))
srcs/builtins/sh_test.c:94:			brace--;
srcs/builtins/sh_test.c:95:		else if (!brace && !ft_strcmp("-a", av[j]))
srcs/builtins/sh_test.c:96:			return (sh_test(j, av, ev) || sh_test(ac - j, av + j, ev));
srcs/builtins/sh_test.c:105:			brace--;
srcs/builtins/sh_test.c:106:		else if (!brace && !ft_strcmp("-o", av[j]))
srcs/builtins/sh_test.c:107:			return (sh_test(j, av, ev) && sh_test(ac - j, av + j, ev));
srcs/builtins/sh_test.c:109:	return (-1);
srcs/builtins/sh_test.c:124:	else if (i == ac - 1)
srcs/builtins/sh_test.c:125:		ret = sh_test(i - j, av + j, NULL);
srcs/builtins/sh_test.c:126:	if (i < ac - 2 && !ft_strcmp(av[i + 1], "-a"))
srcs/builtins/sh_test.c:127:		return (ret == 0 && sh_test(ac - 1, av + 1, NULL) == 0 ? 0 : 1);
srcs/builtins/sh_test.c:128:	else if (i < ac - 2 && !ft_strcmp(av[i + 1], "-o"))
srcs/builtins/sh_test.c:129:		return (ret == 0 || sh_test(ac - 1, av + 1, NULL) == 0 ? 0 : 1);
srcs/builtins/sh_test.c:138:	char	un_op[] = "-b -c -d -e -f -n -p -S -s -z";
srcs/builtins/sh_test.c:139:	char	bi_op[] = "= != -eq -ne -gt -ge -lt -le";
srcs/builtins/sh_test.c:144:	if ((ret = sh_test_and_or(ac, av, ev)) != -1)
srcs/builtins/sh_test.c:147:		ret = !(sh_test(ac - 1, av + 1, ev));
srcs/builtins/sh_test.c:150:	else if (i < ac - 1  && ft_strstr(un_op, av[i]))
srcs/builtins/sh_test.c:152:	else if (i < ac - 2 && ft_strstr(bi_op, av[i + 1]))
srcs/builtins/sh_test.c:154:	else if (i < ac - 3 && !ft_strcmp(av[i], "!") && ft_strstr(bi_op, av[i + 2]))
srcs/builtins/sh_test.c:156:	else if (i < ac - 3 && !ft_strcmp(av[i], "(") && !ft_strcmp(av[i + 3], ")") && ft_strstr(bi_op, av[i + 1]))
srcs/builtins/sh_test.c:158:	else if (i < ac - 4 && !ft_strcmp(av[i], "(") && !ft_strcmp(av[i + 4], ")") && ft_strstr(bi_op, av[i + 2]))
srcs/builtins/sh_test.c:160:	else if (i < ac - 1 && !ft_strcmp(av[i], "("))
srcs/builtins/sh_unalias.c:50:	if (--k == index)
srcs/builtins/sh_unalias.c:74:		while (sh()->aliases && (test = (cut_key(sh()->aliases[j])))
srcs/builtins/sh_unalias.c:81:		if (!sh()->aliases || !sh()->aliases[j])
srcs/builtins/sh_unalias.c:84:			sh()->aliases = delete_a_line(sh()->aliases, j);
srcs/builtins/sh_unalias.c:101:			ft_putstr_fd("42sh: unalias: -", 2);
srcs/builtins/sh_unalias.c:104:					" unalias [-a] name [name ...]\n", 2);
srcs/builtins/sh_unalias.c:121:		if (av[i][0] == '-' && av[i][1] != 0)
srcs/builtins/sh_unalias.c:133:		sh()->aliases = ft_free_tabstr(sh()->aliases);
srcs/builtins/sh_unalias.c:135:		ft_putstr_fd("unalias: usage: unalias [-a] name [name ...]\n", 2);
srcs/command_edition/sh_command_functions.c:39:	if (i < j - 1)
srcs/command_edition/sh_command_functions.c:59:	if (i == j - 1)
srcs/command_edition/sh_copy_option.c:19:	j = -1;
srcs/command_edition/sh_copy_option.c:34:	g_buselect = sh_delete_last(g_buselect, ft_strlen(g_buselect) - 1);
srcs/command_edition/sh_copy_option.c:37:	return (--i);
srcs/command_edition/sh_cursor_motion.c:47:	j = -1;
srcs/command_edition/sh_cursor_motion.c:55:			cursor.rows--;
srcs/command_edition/sh_cursor_motion.c:57:			j = -1;
srcs/command_edition/sh_cursor_motion.c:62:			cursor.col--;
srcs/command_edition/sh_cursor_motion.c:65:		pointer--;
srcs/command_edition/sh_cursor_motion.c:74:	j = -1;
srcs/command_edition/sh_cursor_motion.c:75:	if (i == -1)
srcs/command_edition/sh_cursor_motion.c:111:		i = sh_cursor_forward(ft_strlen(*command) - i - 1, i, cursor, term);
srcs/command_edition/sh_cursor_motion.c:112:	else if (ARROW_LEFT && i > -1)
srcs/command_edition/sh_cursor_motion.c:143:			&& (int)ft_strlen(buf) == head.col - 1)
srcs/command_edition/sh_cursor_motion2.c:48:		cursor->rows = ft_atoi(temp + 2);
srcs/command_edition/sh_cursor_motion2.c:51:		cursor->col = ft_atoi(rows + 1);
srcs/command_edition/sh_cursor_motion_line.c:25:		j = -1;
srcs/command_edition/sh_cursor_motion_line.c:31:			cursor.rows--;
srcs/command_edition/sh_cursor_motion_line.c:33:			j = -1;
srcs/command_edition/sh_cursor_motion_line.c:38:			cursor.col--;
srcs/command_edition/sh_cursor_motion_line.c:41:		pointer--;
srcs/command_edition/sh_cursor_motion_line.c:83:	if ((len = ft_strlen(*command)) < term.col - PROMPT_LENGTH)
srcs/command_edition/sh_cursor_motion_line.c:85:	if (LINE_DOWN && i == -1
srcs/command_edition/sh_cursor_motion_line.c:86:			&& (int)ft_strlen(*command) > term.col - cursor.col)
srcs/command_edition/sh_cursor_motion_line.c:89:			&& (int)ft_strlen(&command[0][i]) > term.col - cursor.col)
srcs/command_edition/sh_cursor_motion_word.c:25:	while (i == -1 || (command[0][i + 1] > 32 && command[0][i + 1] != '\0'))
srcs/command_edition/sh_cursor_motion_word.c:36:	while (i == -1 || (command[0][i + 1] != '\0' && command[0][i + 1] <= 32))
srcs/command_edition/sh_cursor_motion_word.c:54:	j = -1;
srcs/command_edition/sh_cursor_motion_word.c:58:	cursor->rows--;
srcs/command_edition/sh_cursor_motion_word.c:59:	cursor->col = term.col;
srcs/command_edition/sh_cursor_motion_word.c:60:	j = -1;
srcs/command_edition/sh_cursor_motion_word.c:65:	while (i > -1 && command[0][i] <= 32)
srcs/command_edition/sh_cursor_motion_word.c:72:			cursor.col--;
srcs/command_edition/sh_cursor_motion_word.c:74:		i--;
srcs/command_edition/sh_cursor_motion_word.c:76:	while (i > -1 && command[0][i] > 32)
srcs/command_edition/sh_cursor_motion_word.c:83:			cursor.col--;
srcs/command_edition/sh_cursor_motion_word.c:85:		i--;
srcs/command_edition/sh_free_all_cmd.c:20:			while ((*cmd)->parent)
srcs/command_edition/sh_free_all_cmd.c:21:				*cmd = (*cmd)->parent;
srcs/command_edition/sh_free_one_cmd.c:21:			if ((*cmd)->line)
srcs/command_edition/sh_free_one_cmd.c:22:				free((*cmd)->line);
srcs/command_edition/sh_free_one_cmd.c:23:			sh_free_one_cmd(&((*cmd)->sub));
srcs/command_edition/sh_free_one_cmd.c:24:			sh_free_one_cmd(&((*cmd)->next_true));
srcs/command_edition/sh_free_one_cmd.c:25:			sh_free_one_cmd(&((*cmd)->next_false));
srcs/command_edition/sh_init_cmd.c:23:	cmd->line = ft_strdup(line);
srcs/command_edition/sh_init_cmd.c:24:	cmd->parent = parent;
srcs/command_edition/sh_init_cmd.c:25:	cmd->sub = NULL;
srcs/command_edition/sh_init_cmd.c:26:	cmd->next_true = NULL;
srcs/command_edition/sh_init_cmd.c:27:	cmd->next_false = NULL;
srcs/command_edition/sh_init_cmd.c:28:	if (cmd->parent)
srcs/command_edition/sh_init_cmd.c:29:		cmd->parent->sub = cmd;
srcs/command_edition/sh_reader.c:86:	i = -1;
srcs/command_edition/sh_reader.c:101:	hist->index = -1;
srcs/command_edition/sh_reader.c:104:	hist->current = ft_strdup("");
srcs/command_line/sh_command_line.c:9:/*   Updated: 2019/07/18 09:25:18 by ede-ram          ###   ########.fr       */
srcs/command_line/sh_command_line.c:72:			k--;
srcs/command_line/sh_command_parse.c:46:			k--;
srcs/command_line/sh_command_parse2.c:31:	else if (str[index - 1] == '\\')
srcs/command_line/sh_command_parse2.c:35:		else if (str[index - 2] == '\\')
srcs/command_line/sh_command_parse2.c:51:	i -= 1;
srcs/command_line/sh_free_all_ln.c:21:			while ((*ln)->prev)
srcs/command_line/sh_free_all_ln.c:22:				*ln = (*ln)->prev;
srcs/command_line/sh_free_one_ln.c:21:			if ((*ln)->line)
srcs/command_line/sh_free_one_ln.c:22:				free((*ln)->line);
srcs/command_line/sh_free_one_ln.c:23:			sh_free_one_ln(&(*ln)->next);
srcs/command_line/sh_init_ln.c:23:	ln->line = ft_strdup(line);
srcs/command_line/sh_init_ln.c:24:	ln->next = NULL;
srcs/command_line/sh_init_ln.c:25:	ln->prev = parent;
srcs/command_line/sh_init_ln.c:26:	if (ln->prev)
srcs/command_line/sh_init_ln.c:27:		ln->prev->next = ln;
srcs/command_line/sh_strsplit_m.c:37:			k--;
srcs/command_line/sh_strsplit_m.c:94:		k = k + l - j;
srcs/debug_mode/debug_mode.c:28:	p->debug_fd = 2;
srcs/debug_mode/debug_mode.c:51:			printf("Terminal %i chosen, fd %i\n\n\n\n\n--SHELL BEGIN--\n\n\n", n, fd);
srcs/debug_mode/debug_mode.c:52:			p->debug_fd = fd;
srcs/entrypoint/sh_entrypoint.c:23:	i = -1;
srcs/entrypoint/sh_entrypoint.c:24:	sh()->ac = ac;
srcs/entrypoint/sh_entrypoint.c:25:	sh()->av = av;
srcs/entrypoint/sh_entrypoint.c:26:	sh()->ev = ev;
srcs/entrypoint/sh_entrypoint.c:28:	if (ft_fetch_opt("c", 1, sh()->opt))
srcs/entrypoint/sh_entrypoint.c:30:	else if (sh()->ac >= 1)
srcs/entrypoint/sh_init.c:28:	sh_get_env("PPID")->readonly = 1;
srcs/entrypoint/sh_init.c:52:	sh_setenv("0", ft_strdup(sh()->av[0]));
srcs/entrypoint/sh_init.c:72:		tmp = ft_itoa(1 + ft_atoi(sh_get_env("SHLVL")->value));
srcs/entrypoint/sh_init.c:76:	sh_get_env("SHLVL")->exported = 1;
srcs/entrypoint/sh_init.c:90:	sh()->params = sh_env_params(sh()->ev);
srcs/entrypoint/sh_init.c:100:	dprintf(sh()->debug_fd, "sig %i\n", sig);
srcs/entrypoint/sh_init.c:109:		sh()->abort_cmd = 1;
srcs/entrypoint/sh_init.c:159:	/*shell->opt = sh_getopt(&(shell->ac), &(shell->av), "abc:Cefhimns:uvx");
srcs/entrypoint/sh_init.c:160:	shell->abort_cmd = 0;
srcs/entrypoint/sh_init.c:161:	shell->debug = 1;
srcs/entrypoint/sh_init.c:162:	shell->debug_fd = 2;
srcs/entrypoint/sh_init.c:163:	shell->pipe_lst = 0;
srcs/entrypoint/sh_init.c:166:	shell->opt = NULL;
srcs/entrypoint/sh_init.c:167:	ft_getopt(&(shell->ac), &(shell->av), opts, &(shell->opt));
srcs/entrypoint/sh_init.c:169:		shell->pipe_lst = 0;
srcs/entrypoint/sh_init.c:171:	shell->last_cmd_result = 0;
srcs/entrypoint/sh_init.c:172:	shell->lldbug = 0;
srcs/entrypoint/sh_init.c:173:	shell->script_separators[0] = SH_SEMI;
srcs/entrypoint/sh_init.c:174:	shell->script_separators[1] = SH_AND;
srcs/entrypoint/sh_init.c:175:	shell->and_or_separators[0] = SH_AND_IF;
srcs/entrypoint/sh_init.c:176:	shell->and_or_separators[1] = SH_OR_IF;
srcs/entrypoint/sh_init.c:177:	shell->pipeline_separators[0] = SH_OR;
srcs/entrypoint/sh_init.c:178:	shell->pipeline_separators[1] = 0;
srcs/entrypoint/sh_init.c:179:	shell->pipein = 0;
srcs/entrypoint/sh_init.c:180:	shell->pipeout = 0;
srcs/entrypoint/sh_init.c:181:	shell->child_ac = 0;
srcs/entrypoint/sh_init.c:182:	shell->child_argv = 0;
srcs/entrypoint/sh_init.c:183:	shell->redirect_lst = 0;
srcs/entrypoint/sh_init.c:184:	shell->assign_lst = 0;
srcs/entrypoint/sh_init.c:185:	shell->tmp_assign_lst = 0;
srcs/entrypoint/sh_init.c:186:	shell->opened_files = 0;
srcs/entrypoint/sh_init.c:187:	shell->nb_nested_functions = 0;
srcs/entrypoint/sh_init.c:188:	shell->nb_nested_compounds = 0;
srcs/entrypoint/sh_init.c:189:	shell->nb_nested_tokenized_compounds = 0;
srcs/entrypoint/sh_init.c:190:	//shell->assign_lst = 0;
srcs/entrypoint/sh_init.c:192:	if (ft_fetch_opt("debug", 5, sh()->opt))
srcs/entrypoint/sh_init.c:194:		shell->debug = 1; 
srcs/entrypoint/sh_init.c:195:		shell->debug_fd = 2;
srcs/entrypoint/sh_init.c:199:		shell->debug = 0; 
srcs/entrypoint/sh_init.c:200:		shell->debug_fd = open("/dev/null", 0);
srcs/entrypoint/sh_init.c:202:	shell->aliases = NULL;
srcs/entrypoint/sh_init_cmd.c:20:	p->unfinished_cmd = 0;
srcs/entrypoint/sh_init_cmd.c:21:	p->invalid_cmd = 0;
srcs/entrypoint/sh_init_cmd.c:22:	p->cmd = input;
srcs/entrypoint/sh_loop.c:32:		while (lvcpy--)
srcs/entrypoint/sh_loop.c:35:				dprintf(p->debug_fd, "‾‾‾‾‾‾");
srcs/entrypoint/sh_loop.c:36:			dprintf(p->debug_fd, "%c", (lvcpy == 0) ? '|' : ' ');
srcs/entrypoint/sh_loop.c:37:			if (lvcpy < lvl - 1 || lvl == 1)
srcs/entrypoint/sh_loop.c:38:				dprintf(p->debug_fd, "      ");
srcs/entrypoint/sh_loop.c:40:		dprintf(p->debug_fd, "%-15s (%i)-%i\n", (t->content) ? t->content : "o", t->type, t->index);
srcs/entrypoint/sh_loop.c:41:		if (t->sub)
srcs/entrypoint/sh_loop.c:43:			print_all_tokens(p, t->sub, lvl + 1);
srcs/entrypoint/sh_loop.c:45:		t = t->next;
srcs/entrypoint/sh_loop.c:54:	hist->path = find_path();
srcs/entrypoint/sh_loop.c:55:	hist->size_l = 200;
srcs/entrypoint/sh_loop.c:70:	p->exit = 0;
srcs/entrypoint/sh_loop.c:71:	while (!p->exit)
srcs/entrypoint/sh_loop.c:75:		int dbug = sh()->debug;
srcs/entrypoint/sh_loop.c:78:		p->print_syntax_errors = 1;
srcs/entrypoint/sh_loop.c:91:				//	ln_tab[0] = ft_strdup("/bin/echo lala && /bin/ls -la && CTA 3");
srcs/entrypoint/sh_loop.c:100:				ln_tab = ft_strdup("LSCOLORS=lala ls -g");
srcs/entrypoint/sh_loop.c:120:			//printf("%i - %s -\n", strlen(input), input);
srcs/entrypoint/sh_loop.c:123:			p->unfinished_cmd = 0;
srcs/entrypoint/sh_loop.c:124:			p->invalid_cmd = 0;
srcs/entrypoint/sh_loop.c:125:			p->cmd = input;
srcs/entrypoint/sh_loop.c:126:			if ((p->ast = tokenize_input(input)))//line
srcs/entrypoint/sh_loop.c:128:				print_all_tokens(p, p->ast, 0);
srcs/entrypoint/sh_loop.c:129:				p->abort_cmd = 0;
srcs/entrypoint/sh_loop.c:130:				exec_script(p, p->ast, 0);
srcs/entrypoint/sh_loop.c:133:			free_ast(p->ast);
srcs/entrypoint/sh_loop.c:134:			if (p->invalid_cmd)
srcs/entrypoint/sh_loop.c:136:			if (!p->unfinished_cmd)
srcs/entrypoint/sh_loop.c:139:				ft_putstr("$->");//prompt PSX
srcs/executer/exec_compound.c:9:/*   Updated: 2019/08/27 06:24:09 by ede-ram          ###   ########.fr       */
srcs/executer/exec_compound.c:28:	return (exec_script(p, tok->sub, 0));
srcs/executer/exec_compound.c:36:	dprintf(p->debug_fd, "treating CASE\n");
srcs/executer/exec_compound.c:37:	case_elem = tok->sub;
srcs/executer/exec_compound.c:38:	while (case_elem && !p->abort_cmd)
srcs/executer/exec_compound.c:40:		word = case_elem->sub;
srcs/executer/exec_compound.c:43:			if (!ft_strcmp(tok->content, word->content))
srcs/executer/exec_compound.c:44:				return (exec_script(p, tok->sub->sub->sub, 0));
srcs/executer/exec_compound.c:45:			word = word->next;
srcs/executer/exec_compound.c:47:		case_elem = case_elem->next;
srcs/executer/exec_compound.c:58:	dprintf(p->debug_fd, "treating FOR\n");
srcs/executer/exec_compound.c:59:	ins = tok->sub->sub;
srcs/executer/exec_compound.c:61:	if ((value = sh_getenv(tok->sub->content)))
srcs/executer/exec_compound.c:63:	while (ins && !p->abort_cmd)
srcs/executer/exec_compound.c:65:		if (ins->type == SH_WORD)
srcs/executer/exec_compound.c:67:			sh_setenv(tok->sub->content, ins->content);
srcs/executer/exec_compound.c:68:			printf("%s\n", tok->sub->sub->sub->content);
srcs/executer/exec_compound.c:69:			p->last_cmd_result = exec_script(p, tok->sub->sub->sub, 0);
srcs/executer/exec_compound.c:71:		ins = ins->next;
srcs/executer/exec_compound.c:73:	sh_unsetenv(tok->sub->content, &(sh()->params));
srcs/executer/exec_compound.c:75:		sh_setenv(tok->sub->content, tmp);
srcs/executer/exec_compound.c:77:	return (p->last_cmd_result);
srcs/executer/exec_compound.c:85:	dprintf(p->debug_fd, "treating WHILE\n");
srcs/executer/exec_compound.c:87:	while (!p->abort_cmd && (((tmp = exec_script(p, tok->sub->sub, 0)) && type == SH_UNTIL) || (!tmp && type == SH_WHILE)) && !p->abort_cmd)
srcs/executer/exec_compound.c:89:		dprintf(p->debug_fd, "WHILE condition true\n");
srcs/executer/exec_compound.c:90:		ret = exec_script(p, tok->sub->next, 0);
srcs/executer/exec_compound.c:92:	dprintf(p->debug_fd, "WHILE condition false\n");
srcs/executer/exec_compound.c:98:	dprintf(p->debug_fd, "treating IF\n");
srcs/executer/exec_compound.c:99:	if (!exec_script(p, tok->sub->sub, 0) && !p->abort_cmd)
srcs/executer/exec_compound.c:101:		dprintf(p->debug_fd, "IF true\n");
srcs/executer/exec_compound.c:102:		return (p->last_cmd_result = exec_script(p, tok->sub->next->sub, 0));
srcs/executer/exec_compound.c:104:	dprintf(p->debug_fd, "IF false\n");
srcs/executer/exec_compound.c:105:	if (tok->sub->next->next && !p->abort_cmd)
srcs/executer/exec_compound.c:106:		return (p->last_cmd_result = exec_script(p, tok->sub->next->next, 0));
srcs/executer/exec_script.c:9:/*   Updated: 2019/09/02 05:20:55 by ede-ram          ###   ########.fr       */
srcs/executer/exec_script.c:33:	dprintf(p->debug_fd, "treating GROUPING\n");
srcs/executer/exec_script.c:34:	return(exec_script(p, token_compound->sub, 0));
srcs/executer/exec_script.c:43:	if (is_compound(token_begin->type))
srcs/executer/exec_script.c:45:		if (p->nb_nested_compounds >= SH_NESTED_COMPOUND_LIMIT)
srcs/executer/exec_script.c:47:			p->abort_cmd = 1;
srcs/executer/exec_script.c:51:		p->nb_nested_compounds++;
srcs/executer/exec_script.c:53:		ret = exec_compound_command(p, token_begin, token_begin->type);
srcs/executer/exec_script.c:54:		del_n_redirect_lst(&p->redirect_lst, nb_redirections);
srcs/executer/exec_script.c:55:		p->nb_nested_compounds--;
srcs/executer/exec_script.c:68:		dprintf(p->debug_fd, "[%i] PFORK\n", getpid());
srcs/executer/exec_script.c:72:	dprintf(p->debug_fd, "[%i] Pforked\n", getpid());
srcs/executer/exec_script.c:92:		printf("errno - %i", errno);
srcs/executer/exec_script.c:95:	dprintf(p->debug_fd, "PIPE [%i %i]\n", pipe_out[0], pipe_out[1]);
srcs/executer/exec_script.c:96:	push_pipe_lst(&p->pipe_lst, pipe_out);
srcs/executer/exec_script.c:97:	push_redirect_lst(&p->redirect_lst, 1, pipe_out[1]);
srcs/executer/exec_script.c:98:	p->pipein = pipe_in_fd;
srcs/executer/exec_script.c:99:	p->pipeout = pipe_out[1];
srcs/executer/exec_script.c:101:		push_redirect_lst(&p->redirect_lst, 0, pipe_in_fd);
srcs/executer/exec_script.c:103:	p->pipein = 0;
srcs/executer/exec_script.c:104:	p->pipeout = 0;
srcs/executer/exec_script.c:105:	del_n_redirect_lst(&p->redirect_lst, (pipe_in_fd) ? 2 : 1);
srcs/executer/exec_script.c:112:	if ((*p_token_begin)->type == SH_BANG)
srcs/executer/exec_script.c:115:		*p_token_begin = (*p_token_begin)->next;
srcs/executer/exec_script.c:125:	while (input[m] && (m <= n || n == -1))
srcs/executer/exec_script.c:133://Put pipeline in jobs, name delimited by token->index;
srcs/executer/exec_script.c:141:	indexb = token_begin->index;
srcs/executer/exec_script.c:142:	indexe = (token_end) ? token_end->index : -1;
srcs/executer/exec_script.c:143:	print_cmd(p->cmd, indexb, indexe);
srcs/executer/exec_script.c:146:	while (token_begin && !p->abort_cmd && (next_separator = find_token_by_key_until(token_begin, token_end, &p->type, &p->pipeline_separators)) && next_separator->type == SH_OR)
srcs/executer/exec_script.c:148:		dprintf(p->debug_fd, "		x pipeline cut at '%i'\n", p->type);
srcs/executer/exec_script.c:150:		token_begin = next_separator->next;
srcs/executer/exec_script.c:152:	if (p->abort_cmd)
srcs/executer/exec_script.c:157:	dprintf(p->debug_fd, "		x pipeline cut at '%i'\n", p->type);
srcs/executer/exec_script.c:159:		push_redirect_lst(&p->redirect_lst, 0, next_pipe_fd);
srcs/executer/exec_script.c:160:	p->pipein = next_pipe_fd;
srcs/executer/exec_script.c:164:	p->last_cmd_result = (next_pipe_fd) ? (child_pid = exec_command_in_background(p, token_begin, token_end)) : exec_command(p, token_begin, token_end);//
srcs/executer/exec_script.c:168:		del_n_redirect_lst(&p->redirect_lst, 1);
srcs/executer/exec_script.c:169:	delete_close_all_pipe_lst(p->pipe_lst);
srcs/executer/exec_script.c:170:	p->pipe_lst = 0;
srcs/executer/exec_script.c:172:		p->last_cmd_result = (p->last_cmd_result) ? 0 : 1;
srcs/executer/exec_script.c:174://CAN DO CMD1;!; <--WILL REVERSE LAST_CMD_RESULT
srcs/executer/exec_script.c:183:	while (token_begin && !p->abort_cmd)
srcs/executer/exec_script.c:185:		next_separator = find_token_by_key_until(token_begin, token_end, &p->type, &p->and_or_separators);
srcs/executer/exec_script.c:186:		dprintf(p->debug_fd, "		x and_or cut at '%i'\n", p->type);
srcs/executer/exec_script.c:187:		tmp = p->type;
srcs/executer/exec_script.c:188:		if (!prev_separator || (prev_separator == SH_AND_IF && !p->last_cmd_result)
srcs/executer/exec_script.c:189:				|| (prev_separator == SH_OR_IF && p->last_cmd_result))
srcs/executer/exec_script.c:192:		token_begin = (next_separator && next_separator != token_end) ? next_separator->next : 0;
srcs/executer/exec_script.c:193:		while (token_begin && token_begin->type == SH_NEWLINE)
srcs/executer/exec_script.c:194:			token_begin = token_begin->next;
srcs/executer/exec_script.c:206:		dprintf(p->debug_fd, "fork error\n");
srcs/executer/exec_script.c:211:		dprintf(p->debug_fd, "dans fork\n");
srcs/executer/exec_script.c:217:		while (wait(&ret) != -1)
srcs/executer/exec_script.c:240:		if (token_begin->type == SH_SEMI || token_begin->type == SH_AND || (token_begin->type == SH_NEWLINE && !skip_newline))
srcs/executer/exec_script.c:242:		if (token_begin->type == SH_WORD || token_begin->type == SH_ASSIGN || token_begin->type == SH_LESS || token_begin->type == SH_GREAT || token_begin->type == SH_DLESS || token_begin->type == SH_DGREAT || token_begin->type == SH_LESSAND || token_begin->type == SH_GREATAND || token_begin->type == SH_LESSGREAT || token_begin->type == SH_DLESSDASH || token_begin->type == SH_CLOBBER || token_begin->type == SH_IF || token_begin->type == SH_CASE || token_begin->type == SH_WHILE || token_begin->type == SH_UNTIL || token_begin->type == SH_FOR || token_begin->type == SH_BRACES || token_begin->type == SH_BANG || token_begin->type == SH_FUNC)
srcs/executer/exec_script.c:244:		else if (token_begin->type == SH_AND || token_begin->type == SH_OR || token_begin->type == SH_AND_IF || token_begin->type == SH_OR_IF || token_begin->type == SH_DSEMI)
srcs/executer/exec_script.c:246:		token_begin = token_begin->next;
srcs/executer/exec_script.c:255:	while (token_begin && !p->abort_cmd)
srcs/executer/exec_script.c:257:		while (token_begin && token_begin->type == SH_NEWLINE)
srcs/executer/exec_script.c:258:			token_begin = token_begin->next;
srcs/executer/exec_script.c:260:		dprintf(p->debug_fd, "		x script cut at '%i'\n", p->type);
srcs/executer/exec_script.c:261:		if (p->type == SH_AND)
srcs/executer/exec_script.c:265:		token_begin = (next_separator && next_separator != token_end) ? next_separator->next : 0;
srcs/executer/exec_script.c:267:	return (p->last_cmd_result);
srcs/executer/exec_simple_command.c:65:		dprintf(p->debug_fd, "fd %.3i --- to fd %.3i\n", origin->in, origin->out);
srcs/executer/exec_simple_command.c:66:		origin = origin->next;
srcs/executer/exec_simple_command.c:85:		dprintf(p->debug_fd, "WAIT ERROR\n");
srcs/executer/exec_simple_command.c:88:	dprintf(p->debug_fd, "waited\n");
srcs/executer/exec_simple_command.c:91:	dprintf(p->debug_fd, "waited2\n");
srcs/executer/exec_simple_command.c:106:	dprintf(p->debug_fd, "waited3\n");
srcs/executer/exec_simple_command.c:115:	//while (waitpid(WAIT_ANY, &wait_status, 0) != -1)
srcs/executer/exec_simple_command.c:117:	dprintf(p->debug_fd, "		o Wait finish\n");
srcs/executer/exec_simple_command.c:125:		if (origin->out == out)
srcs/executer/exec_simple_command.c:126:			return (origin->in);
srcs/executer/exec_simple_command.c:127:		origin = (origin->next == end) ? 0 : origin->next;
srcs/executer/exec_simple_command.c:129:	return (-1);
srcs/executer/exec_simple_command.c:141:	origin = p->redirect_lst;
srcs/executer/exec_simple_command.c:145:		//printf("lst->out = %d, in = %d\n", lst->out, lst->in);
srcs/executer/exec_simple_command.c:146:		//close(lst->out) <-- ! see man dup2
srcs/executer/exec_simple_command.c:147:		if ((out = out_already_in_lst_n(lst->out, origin, lst)) > -1)
srcs/executer/exec_simple_command.c:149:			if ((lst->out = dup(out)) < 0)
srcs/executer/exec_simple_command.c:150:				dprintf(p->debug_fd, "DUPERROR %i, errno %i\n", lst->out, errno);
srcs/executer/exec_simple_command.c:152:				dprintf(p->debug_fd, "DUPPED %i-> %i\n", out, lst->out);
srcs/executer/exec_simple_command.c:154:		dprintf(p->debug_fd, "redirect %i->%i\n", lst->in, lst->out);
srcs/executer/exec_simple_command.c:155:		if (dup2(lst->out, lst->in) < 0)
srcs/executer/exec_simple_command.c:156:			dprintf(p->debug_fd, "DUP2ERROR %i->%i, errno %i\n", lst->in, lst->out, errno);
srcs/executer/exec_simple_command.c:158:			dprintf(p->debug_fd, "DUP2 %i->%i\n", lst->in, lst->out);
srcs/executer/exec_simple_command.c:160:		ret = close(lst->out);
srcs/executer/exec_simple_command.c:161:		dprintf(p->debug_fd, "close fd %i error n%i\n", lst->out, (ret < 0) ? errno : 0);
srcs/executer/exec_simple_command.c:162:		lst = lst->next;
srcs/executer/exec_simple_command.c:168:	if (p->pipeout)
srcs/executer/exec_simple_command.c:170:		close(p->pipeout); //<PROTECC
srcs/executer/exec_simple_command.c:171:		dprintf(p->debug_fd, "[%i] CLOSE PIPEOUT %i\n", getpid(), p->pipeout);
srcs/executer/exec_simple_command.c:174:		dprintf(p->debug_fd, "[%i] NO PIPEOUT\n", getpid());
srcs/executer/exec_simple_command.c:175:	if (p->pipein)
srcs/executer/exec_simple_command.c:177:		close(p->pipein); //<PROTECC
srcs/executer/exec_simple_command.c:178:		dprintf(p->debug_fd, "[%i] CLOSE PIPEIN %i\n", getpid(), p->pipein);
srcs/executer/exec_simple_command.c:181:		dprintf(p->debug_fd, "[%i] NO PIPEIN\n", getpid());
srcs/executer/exec_simple_command.c:195:		tmp = tmp->next;
srcs/executer/exec_simple_command.c:202:		tab[len++] = ft_join_with_char(env->key, env->value, '=');
srcs/executer/exec_simple_command.c:203:		env = env->next;
srcs/executer/exec_simple_command.c:215:	if (/*(p->lldbug) ? !child_pid : */child_pid)
srcs/executer/exec_simple_command.c:217:		dprintf(p->debug_fd, "[%i] FORK\n", getpid());
srcs/executer/exec_simple_command.c:223:		dprintf(p->debug_fd, "[%i] FORKED\n", getpid());
srcs/executer/exec_simple_command.c:225:		//printf("lst->out = %d, in = %d\n", p->redirect_lst->out, p->redirect_lst->in);
srcs/executer/exec_simple_command.c:227:		printf("%s %s\n", p->child_argv[0], p->child_argv[1]);
srcs/executer/exec_simple_command.c:228:		execve(path, p->child_argv, transform_env_for_child(p->params)/*prgm_env->env is a struct*/);
srcs/executer/exec_simple_command.c:231:	return (ret); //<-- Return What?
srcs/executer/exec_simple_command.c:236:	if (!S_ISREG(st->st_mode))
srcs/executer/exec_simple_command.c:238:	else if (st->st_uid == getuid() && st->st_mode & S_IXUSR)
srcs/executer/exec_simple_command.c:240:	else if (st->st_gid == getgid() && st->st_mode & S_IXGRP)
srcs/executer/exec_simple_command.c:242:	else if (st->st_mode & S_IXOTH)
srcs/executer/exec_simple_command.c:280:	path = p->child_argv[0];
srcs/executer/exec_simple_command.c:281:	dprintf(p->debug_fd, "[%i] try path--%s\n", getpid(), path);
srcs/executer/exec_simple_command.c:284:	//dprintf(p->debug_fd, "with_redirections:\n");
srcs/executer/exec_simple_command.c:285:	//print_redirections(p, p->redirect_lst);
srcs/executer/exec_simple_command.c:292:		dprintf(p->debug_fd, "try path %s\n", real_path);
srcs/executer/exec_simple_command.c:296:		//dprintf(p->debug_fd, "path error %i\n", errno);
srcs/executer/exec_simple_command.c:301:		printf("--%s not found\n", path);
srcs/executer/exec_simple_command.c:318:	prev_next = &p->opened_files;
srcs/executer/exec_simple_command.c:320:		prev_next = &((*prev_next)->next);
srcs/executer/exec_simple_command.c:323:	(*prev_next)->name = ft_strdup(name);
srcs/executer/exec_simple_command.c:324:	(*prev_next)->fd = fd;
srcs/executer/exec_simple_command.c:325:	(*prev_next)->next = 0;
srcs/executer/exec_simple_command.c:332:	while (p->opened_files)
srcs/executer/exec_simple_command.c:334:		free(p->opened_files->name);
srcs/executer/exec_simple_command.c:335:		tmp = p->opened_files;
srcs/executer/exec_simple_command.c:336:		p->opened_files = p->opened_files->next;
srcs/executer/exec_simple_command.c:345:	f = p->opened_files;
srcs/executer/exec_simple_command.c:348:		if (name && f->name && !ft_strcmp(f->name, name))
srcs/executer/exec_simple_command.c:349:			return (f->fd);
srcs/executer/exec_simple_command.c:350:		f = f->next;
srcs/executer/exec_simple_command.c:352:	return (-1);
srcs/executer/exec_simple_command.c:365:	return (-1);
srcs/executer/exec_simple_command.c:380:		real_path = ft_strjoin(real_path, "/");//<-- FREE
srcs/executer/exec_simple_command.c:381:		real_path = ft_strjoin(real_path, path);//<--SAME
srcs/executer/exec_simple_command.c:384:	if ((fd = file_is_already_open(p, real_path)) > -1)
srcs/executer/exec_simple_command.c:386:		dprintf(p->debug_fd, "%s already opened : fd %i\n", real_path, fd);
srcs/executer/exec_simple_command.c:393:		return (-1);
srcs/executer/exec_simple_command.c:396:	dprintf(p->debug_fd, "[%i]open path %s fd %i\n", getpid(), real_path, fd);
srcs/executer/exec_simple_command.c:409:	while (token_begin && (is_redirection_operator(token_begin->type) || is_compound(token_begin->type)))
srcs/executer/exec_simple_command.c:411:		if (is_redirection_operator(token_begin->type))
srcs/executer/exec_simple_command.c:413:			if ((fd = create_open_file(p, token_begin->sub->content, token_begin->type)) > 0)
srcs/executer/exec_simple_command.c:415:				if (token_begin->content[0] == '&')
srcs/executer/exec_simple_command.c:419:					push_redirect_lst(&p->redirect_lst, ft_atoi(token_begin->content), fd/*<-, opened fd*/);
srcs/executer/exec_simple_command.c:424:		token_begin = (token_begin->next == token_end) ? 0 : token_begin->next;
srcs/executer/exec_simple_command.c:438:		if (token_begin->type == SH_WORD && !ft_strchr(token_begin->content, '='))//hello= ? =hello ?
srcs/executer/exec_simple_command.c:440:		if (token_begin->type == SH_WORD && cmd_begin)
srcs/executer/exec_simple_command.c:442:		token_begin = (token_begin->next == token_end) ? 0 : token_begin->next;
srcs/executer/exec_simple_command.c:451:	i = -1;
srcs/executer/exec_simple_command.c:471:		if (fd_in == -1)
srcs/executer/exec_simple_command.c:473:			push_redirect_lst(&p->redirect_lst, 1, fd_out);
srcs/executer/exec_simple_command.c:474:			push_redirect_lst(&p->redirect_lst, 2, fd_out);
srcs/executer/exec_simple_command.c:479:			push_redirect_lst(&p->redirect_lst, fd_in, fd_out);
srcs/executer/exec_simple_command.c:485:		if (fd_in == -1)
srcs/executer/exec_simple_command.c:487:			push_redirect_lst(&p->redirect_lst, 0, fd_out);
srcs/executer/exec_simple_command.c:492:			push_redirect_lst(&p->redirect_lst, fd_in, fd_out);
srcs/executer/exec_simple_command.c:508:	if (!token->content)
srcs/executer/exec_simple_command.c:510:		fd_in = -1;
srcs/executer/exec_simple_command.c:513:		fd_in = ft_atoi(token->content);
srcs/executer/exec_simple_command.c:514:	if (str_isnum(token->sub->content))
srcs/executer/exec_simple_command.c:515:		fd_out = ft_atoi(token->sub->content);
srcs/executer/exec_simple_command.c:516:	else if (!((fd_out = create_open_file(p, token->sub->content, token->type)) > 0))
srcs/executer/exec_simple_command.c:518:		dprintf(p->debug_fd, "redirection error in %s\n", token->content);
srcs/executer/exec_simple_command.c:521:	dprintf(p->debug_fd, "fd_out = %i\n", fd_out);
srcs/executer/exec_simple_command.c:522:	*nb_redirections += push_redirections(p, fd_in, fd_out, token->type);
srcs/executer/exec_simple_command.c:529:	while (n-- && p->assign_lst)
srcs/executer/exec_simple_command.c:531:		free(p->assign_lst->key);
srcs/executer/exec_simple_command.c:532:		free(p->assign_lst->value);
srcs/executer/exec_simple_command.c:533:		tmp = p->assign_lst->next;
srcs/executer/exec_simple_command.c:534:		free(p->assign_lst);
srcs/executer/exec_simple_command.c:535:		p->assign_lst = tmp;
srcs/executer/exec_simple_command.c:545:	tmp = p->assign_lst;
srcs/executer/exec_simple_command.c:546:	equal = ft_strchr(token->content, '=');
srcs/executer/exec_simple_command.c:548:	p->assign_lst = sh_create_param(token->content);
srcs/executer/exec_simple_command.c:550:	p->assign_lst->value = ft_strdup(equal + 1);
srcs/executer/exec_simple_command.c:551:	p->assign_lst->next = tmp;
srcs/executer/exec_simple_command.c:558:	//	->retokenize_it
srcs/executer/exec_simple_command.c:564:	p->child_ac = count_argv(token_begin, token_end);
srcs/executer/exec_simple_command.c:565:	if (!(p->child_argv = (char**)malloc((p->child_ac + 1) * sizeof(char*))))
srcs/executer/exec_simple_command.c:573:		if (is_redirection_operator(token_begin->type))
srcs/executer/exec_simple_command.c:575:		else if (!cmd_begin && (ft_strchr(token_begin->content, '=') > token_begin->content))
srcs/executer/exec_simple_command.c:577:		else if (token_begin->type == SH_WORD)
srcs/executer/exec_simple_command.c:579:			p->child_argv[(ac)++] = ft_strdup(token_begin->content);
srcs/executer/exec_simple_command.c:582:		token_begin = (token_begin->next == token_end) ? 0 : token_begin->next;
srcs/executer/exec_simple_command.c:584:	p->child_argv[ac] = 0;
srcs/executer/exec_simple_command.c:595:		*p_argv_stack = create_token(SH_WORD, token->index, token->content);
srcs/executer/exec_simple_command.c:599:		while (tmp->next)
srcs/executer/exec_simple_command.c:600:			tmp = tmp->next;
srcs/executer/exec_simple_command.c:601:		tmp->next = create_token(SH_WORD, token->index, token->content);
srcs/executer/exec_simple_command.c:616:		token_begin = (token_begin->next == token_end) ? 0 : token_begin->next;
srcs/executer/exec_simple_command.c:632:			origin = sh_expansion(stack_argvs, &(p->params));
srcs/executer/exec_simple_command.c:636:			actual->next = sh_expansion(stack_argvs, &(p->params));
srcs/executer/exec_simple_command.c:637:		while (actual && actual->next)
srcs/executer/exec_simple_command.c:638:			actual = actual->next;
srcs/executer/exec_simple_command.c:639:		stack_argvs = stack_argvs->next;
srcs/executer/exec_simple_command.c:656:		tmp = tmp->next;
srcs/executer/exec_simple_command.c:659:	sh()->child_ac = len;
srcs/executer/exec_simple_command.c:667:		argvs[len++] = ft_strdup(ast->content);
srcs/executer/exec_simple_command.c:668:		printf("->%s\n", argvs[len - 1]);
srcs/executer/exec_simple_command.c:669:		ast = ast->next;
srcs/executer/exec_simple_command.c:685:		if (is_redirection_operator(token_begin->type))
srcs/executer/exec_simple_command.c:687:		else if (!cmd_begin && (ft_strchr(token_begin->content, '=') > token_begin->content))
srcs/executer/exec_simple_command.c:689:		else if (token_begin->type == SH_WORD)
srcs/executer/exec_simple_command.c:694:		token_begin = (token_begin->next == token_end) ? 0 : token_begin->next;
srcs/executer/exec_simple_command.c:699:	p->child_argv = build_child_argvs(argv_stack);
srcs/executer/exec_simple_command.c:731:		sh()->abort_cmd = 1;
srcs/executer/exec_simple_command.c:732:		sh()->exit = 1;
srcs/executer/exec_simple_command.c:748:	origin = p->redirect_lst;
srcs/executer/exec_simple_command.c:752:		//printf("lst->out = %d, in = %d\n", lst->out, lst->in);
srcs/executer/exec_simple_command.c:753:		//close(lst->out) <-- ! see man dup2
srcs/executer/exec_simple_command.c:754:		if ((out = out_already_in_lst_n(lst->out, origin, lst)) > -1)
srcs/executer/exec_simple_command.c:756:			if ((lst->out = dup(out)) < 0)
srcs/executer/exec_simple_command.c:757:				dprintf(p->debug_fd, "DUPERROR %i, errno %i\n", lst->out, errno);
srcs/executer/exec_simple_command.c:759:				dprintf(p->debug_fd, "DUPPED %i-> %i\n", out, lst->out);
srcs/executer/exec_simple_command.c:761:		dprintf(p->debug_fd, "redirect %i->%i\n", lst->in, lst->out);
srcs/executer/exec_simple_command.c:762:		//old = dup(lst->out)
srcs/executer/exec_simple_command.c:763:		if (dup2(lst->out, lst->in) < 0)
srcs/executer/exec_simple_command.c:764:			dprintf(p->debug_fd, "DUP2ERROR %i->%i, errno %i\n", lst->in, lst->out, errno);
srcs/executer/exec_simple_command.c:766:			dprintf(p->debug_fd, "DUP2 %i->%i\n", lst->in, lst->out);
srcs/executer/exec_simple_command.c:768:		ret = close(lst->out);
srcs/executer/exec_simple_command.c:769:		dprintf(p->debug_fd, "close fd %i error n%i\n", lst->out, (ret < 0) ? errno : 0);
srcs/executer/exec_simple_command.c:770:		lst = lst->next;
srcs/executer/exec_simple_command.c:780:		olds = olds->next;
srcs/executer/exec_simple_command.c:790:	dprintf(p->debug_fd, "[%i] BUILTIN\n", getpid());
srcs/executer/exec_simple_command.c:791:	ret = f(p->child_ac, p->child_argv, &(p->params));
srcs/executer/exec_simple_command.c:794:	return (ret); //<-- Return What?
srcs/executer/exec_simple_command.c:803:	assign = p->assign_lst;
srcs/executer/exec_simple_command.c:806:		if (sh_isset(assign->key))
srcs/executer/exec_simple_command.c:808:			tmp = p->tmp_assign_lst;
srcs/executer/exec_simple_command.c:809:			p->tmp_assign_lst = sh_create_param(assign->key);
srcs/executer/exec_simple_command.c:810:			p->tmp_assign_lst->value = ft_strdup(sh_getenv(assign->key));
srcs/executer/exec_simple_command.c:811:			p->tmp_assign_lst->next = tmp;
srcs/executer/exec_simple_command.c:813:		sh_setenv(assign->key, assign->value);
srcs/executer/exec_simple_command.c:814:		assign = assign->next;
srcs/executer/exec_simple_command.c:823:	assign = p->assign_lst;
srcs/executer/exec_simple_command.c:826:		sh_unsetenv(assign->key, &(sh()->params));
srcs/executer/exec_simple_command.c:827:		assign = assign->next;
srcs/executer/exec_simple_command.c:829:	assign = p->tmp_assign_lst;
srcs/executer/exec_simple_command.c:832:		sh_setenv(assign->key, assign->value);
srcs/executer/exec_simple_command.c:834:		assign = assign->next;
srcs/executer/exec_simple_command.c:835:		free(tmp->key);
srcs/executer/exec_simple_command.c:836:		free(tmp->value);
srcs/executer/exec_simple_command.c:839:	p->tmp_assign_lst = 0;
srcs/executer/exec_simple_command.c:847:	a = p->assign_lst;
srcs/executer/exec_simple_command.c:850:		printf("%s=%s\n", a->key, a->value);
srcs/executer/exec_simple_command.c:851:		a = a->next;
srcs/executer/exec_simple_command.c:859:	assign = p->assign_lst;
srcs/executer/exec_simple_command.c:862:		sh_setenv(assign->key, assign->value);
srcs/executer/exec_simple_command.c:863:		assign = assign->next;
srcs/executer/exec_simple_command.c:881:	if (p->nb_nested_functions >= SH_NESTED_FUNCTION_LIMIT)
srcs/executer/exec_simple_command.c:883:		p->abort_cmd = 1;
srcs/executer/exec_simple_command.c:887:	p->nb_nested_functions++;
srcs/executer/exec_simple_command.c:888:	ret = exec_compound_command(p, func->sub->sub, 0);
srcs/executer/exec_simple_command.c:889:	p->nb_nested_functions--;
srcs/executer/exec_simple_command.c:899:	tmp = p->functions;
srcs/executer/exec_simple_command.c:900:	p->functions = dup_token_with_sub(function);
srcs/executer/exec_simple_command.c:901:	p->functions->next = tmp;
srcs/executer/exec_simple_command.c:910:	func = sh()->functions;
srcs/executer/exec_simple_command.c:911:	while (func && ft_strcmp(func->content, name))
srcs/executer/exec_simple_command.c:912:		func = func->next;
srcs/executer/exec_simple_command.c:924:		printf("tok[%i] = %s\n", i, tok->content);
srcs/executer/exec_simple_command.c:925:		tok = tok->next;
srcs/executer/exec_simple_command.c:941:	while (tmp != token_end && tmp->next)
srcs/executer/exec_simple_command.c:942:		tmp = tmp->next;
srcs/executer/exec_simple_command.c:943:	if (tmp->type == SH_FUNC)
srcs/executer/exec_simple_command.c:946:	if (!p->child_argv[0])
srcs/executer/exec_simple_command.c:949:	dprintf(p->debug_fd, "%i redirections\n", nb_redirections);
srcs/executer/exec_simple_command.c:950:	print_redirections(p, p->redirect_lst);
srcs/executer/exec_simple_command.c:951:	if ((func = is_defined_function(p->child_argv[0])))
srcs/executer/exec_simple_command.c:953:	else if ((f = sh_is_builtin(p->child_argv[0])))
srcs/executer/exec_simple_command.c:957:	del_n_redirect_lst(&p->redirect_lst, nb_redirections);
srcs/executer/exec_simple_command.c:959:	////print_redirections(p, p->redirect_lst);
srcs/executer/fd_handler.c:16:	fd->usr_fd = user_fd;
srcs/executer/fd_handler.c:17:	fd->real_fd = real_fd;
srcs/executer/redirections_handler.c:11:	tmp->in = in;
srcs/executer/redirections_handler.c:12:	tmp->out = out;
srcs/executer/redirections_handler.c:13:	tmp->next = *p_origin;
srcs/executer/redirections_handler.c:21:	while (n-- && *p_origin)
srcs/executer/redirections_handler.c:23:		if ((*p_origin)->out > 2)
srcs/executer/redirections_handler.c:24:			close((*p_origin)->out);
srcs/executer/redirections_handler.c:25:		if ((*p_origin)->in > 2)
srcs/executer/redirections_handler.c:26:			close((*p_origin)->in);
srcs/executer/redirections_handler.c:28:		*p_origin = (*p_origin)->next;
srcs/executer/redirections_handler.c:39:		close(lst->pipe[0]);
srcs/executer/redirections_handler.c:40:		close(lst->pipe[1]);
srcs/executer/redirections_handler.c:42:		lst = lst->next;
srcs/executer/redirections_handler.c:53:	lst->next = 0;
srcs/executer/redirections_handler.c:54:	lst->pipe[0] = pipe[0];
srcs/executer/redirections_handler.c:55:	lst->pipe[1] = pipe[1];
srcs/executer/redirections_handler.c:65:	(*p_origin)->next = tmp;
srcs/executer/sh_exec_arg.c:27:	opt = ft_fetch_opt("c", 1, sh()->opt);
srcs/executer/sh_exec_arg.c:28:	if (opt && opt->arg)
srcs/executer/sh_exec_arg.c:29:		ret = opt->arg;
srcs/executer/sh_exec_arg.c:31:	if (ret && *ret && (sh()->ast = tokenize_input(ret)))//line
srcs/executer/sh_exec_arg.c:33:		print_all_tokens(sh(), sh()->ast, 0);
srcs/executer/sh_exec_arg.c:34:		exec_script(sh(), sh()->ast, 0);
srcs/executer/sh_exec_file.c:33:		return (-1);
srcs/executer/sh_exec_file.c:37:		return (-1);
srcs/executer/sh_exec_file.c:49:	if (input && *input && (p->ast = tokenize_input(input)))//line
srcs/executer/sh_exec_file.c:51:		print_all_tokens(p, p->ast, 0);
srcs/executer/sh_exec_file.c:52:		exec_script(p, p->ast, 0);
srcs/executer/sh_exec_file.c:64:	while (i < p->ac)
srcs/executer/sh_exec_file.c:65:		sh_script(p->av[i++]);
srcs/executer/sh_exec_stdin.c:37:	if (ret && *ret && (sh()->ast = tokenize_input(ret)))//line
srcs/executer/sh_exec_stdin.c:39:		print_all_tokens(sh(), sh()->ast, 0);
srcs/executer/sh_exec_stdin.c:40:		exec_script(sh(), sh()->ast, 0);
srcs/exitpoint/sh_exitpoint.c:20:	if (sh()->debug_fd > 2)
srcs/exitpoint/sh_exitpoint.c:21:		close(sh()->debug_fd);
srcs/exitpoint/sh_exitpoint.c:24:	sh()->aliases = ft_free_tabstr(sh()->aliases);
srcs/exitpoint/sh_free_opts.c:22:	if (!(opts = sh()->opt))
srcs/exitpoint/sh_free_opts.c:26:		tmp = opts->next;
srcs/exitpoint/sh_free_opts.c:27:		if (opts->arg)
srcs/exitpoint/sh_free_opts.c:28:			free(opts->arg);
srcs/exitpoint/sh_free_params.c:23:	if (!(params = sh()->params))
srcs/exitpoint/sh_free_params.c:27:		tmp = params->next;
srcs/exitpoint/sh_free_params.c:28:		if (params->key)
srcs/exitpoint/sh_free_params.c:29:			free(params->key);
srcs/exitpoint/sh_free_params.c:30:		if (params->value)
srcs/exitpoint/sh_free_params.c:31:			free(params->value);
srcs/history/sh_21_history.c:33:	if (hist->size_r > hist->size_l)
srcs/history/sh_21_history.c:34:		hist->size_r = hist->size_l;
srcs/history/sh_21_history.c:35:	hist->topush = 0;
srcs/history/sh_21_history.c:36:	hist->prev = ft_reverse_tab(history);
srcs/history/sh_21_history.c:37:	hist->index = -1;
srcs/history/sh_21_history.c:47:	hist->size_r = 0;
srcs/history/sh_21_history.c:50:	if (hist->size_l == 0 || !hist->path)
srcs/history/sh_21_history.c:52:		hist->prev = NULL;
srcs/history/sh_21_history.c:55:	if (!(fd = open(hist->path, O_RDONLY | O_CREAT | O_SYNC, 0600)))
srcs/history/sh_21_history.c:59:		if (hist->size_r < hist->size_l - 1)
srcs/history/sh_21_history.c:64:		hist->size_r += 1;
srcs/history/sh_21_history.c:78:	i = -1;
srcs/history/sh_21_history.c:79:	if (!str || !ft_strcmp(str, "") || !hist->path)
srcs/history/sh_21_history.c:81:	hist->prev = ft_reverse_tab(hist->prev);
srcs/history/sh_21_history.c:85:		hist->prev = ft_reverse_tab(hist->prev);
srcs/history/sh_21_history.c:88:			hist->prev = tab_realloc(hist->prev, temp[i]);
srcs/history/sh_21_history.c:89:			hist->topush++;
srcs/history/sh_21_history.c:92:		hist->prev = ft_reverse_tab(hist->prev);
srcs/history/sh_21_history.c:95:	hist->prev = tab_realloc(hist->prev, str);
srcs/history/sh_21_history.c:96:	hist->topush++;
srcs/history/sh_21_history.c:97:	hist->prev = ft_reverse_tab(hist->prev);
srcs/history/sh_21_history.c:106:	i = hist->topush - 1;
srcs/history/sh_21_history.c:107:	if (!(fd = open(hist->path,
srcs/history/sh_21_history.c:111:		ft_putendl_fd(hist->prev[i--], fd);
srcs/history/sh_21_history.c:113:	hist->prev = ft_free_tabstr(hist->prev);
srcs/history/sh_cursor_history.c:23:	index = hist->index;
srcs/history/sh_cursor_history.c:24:	prev = hist->prev;
srcs/history/sh_cursor_history.c:32:		hist->index = index;
srcs/history/sh_cursor_history.c:33:	return (*command ? ft_strlen(*command) - 1 : ft_strlen(current) - 1);
srcs/history/sh_cursor_history.c:41:	index = hist->index;
srcs/history/sh_cursor_history.c:42:	prev = hist->prev;
srcs/history/sh_cursor_history.c:45:		index--;
srcs/history/sh_cursor_history.c:47:		hist->index = index;
srcs/history/sh_cursor_history.c:48:		return (ft_strlen(current) - 1);
srcs/history/sh_cursor_history.c:50:	while (--index >= 0 && !(!ft_strncmp_n(current, prev[index],
srcs/history/sh_cursor_history.c:56:	hist->index = index;
srcs/history/sh_cursor_history.c:57:	return (*command ? ft_strlen(*command) - 1 : ft_strlen(current) - 1);
srcs/history/sh_cursor_history.c:66:		i = history_up(command, hist, hist->current);
srcs/history/sh_cursor_history.c:67:	else if (ARROW_DOWN && hist->index >= 0)
srcs/history/sh_cursor_history.c:68:		i = history_down(command, hist, hist->current);
srcs/history/sh_cursor_history.c:70:		*command = ft_strdup(hist->current);
srcs/history/sh_get_next_line.c:80:				&& get_string(fd, &str) == -1)))
srcs/history/sh_get_next_line.c:81:		return (-1);
srcs/history/sh_history_2.c:33:	ft_memdel((void**)&hist->current);
srcs/history/sh_history_2.c:34:	hist->current = ft_strdup(*command);
srcs/history/sh_history_2.c:35:	hist->index = -1;
srcs/history/sh_history_2.c:68:	i--;
srcs/history/sh_history_2.c:73:		history[i--] = temp;
srcs/history/sh_history_2.c:87:		history[i - 1] = history[i];
srcs/history/sh_history_2.c:90:	history[--i] = ft_strdup(line);
srcs/parameters/sh_create_param.c:23:	new->key = ft_strdup(key);
srcs/parameters/sh_create_param.c:24:	new->value = NULL;
srcs/parameters/sh_create_param.c:25:	new->exported = 0;
srcs/parameters/sh_create_param.c:26:	new->readonly = 0;
srcs/parameters/sh_create_param.c:27:	new->next = NULL;
srcs/parameters/sh_env_params.c:29:		params->value = ft_strdup(*ev + i + 1);
srcs/parameters/sh_env_params.c:30:		params->exported = 1;
srcs/parameters/sh_env_params.c:31:		params->readonly = 0;
srcs/parameters/sh_env_params.c:33:		params->next = sh_env_params(ev + 1);
srcs/parameters/sh_get_env.c:21:		if (!ft_strcmp(key, handle->key))
srcs/parameters/sh_get_env.c:23:		handle = handle->next;
srcs/parameters/sh_get_env.c:34:	if ((tmp = sh_getvar(sh()->env, key)))
srcs/parameters/sh_get_value.c:21:		if (!ft_strcmp(key, handle->key))
srcs/parameters/sh_get_value.c:22:			return (handle->value);
srcs/parameters/sh_get_value.c:23:		handle = handle->next;
srcs/parameters/sh_get_value.c:34:	if ((tmp = sh_getval(sh()->params, key)))
srcs/parameters/sh_getenv.c:21:		if (!ft_strcmp(key, handle->key))
srcs/parameters/sh_getenv.c:22:			return (handle->value);
srcs/parameters/sh_getenv.c:23:		handle = handle->next;
srcs/parameters/sh_getenv.c:34:	env = sh()->params;
srcs/parameters/sh_getenv.c:37:		if (!ft_strcmp(env->key, key))
srcs/parameters/sh_getenv.c:39:		env = env->next;
srcs/parameters/sh_getenv.c:50:	if ((tmp = sh_getval(sh()->params, key)))
srcs/parameters/sh_init_var.c:25:		sh_set_value(var->key, value);
srcs/parameters/sh_init_var.c:30:	var->key = ft_strdup(key);
srcs/parameters/sh_init_var.c:31:	var->value = ft_strdup(value);
srcs/parameters/sh_init_var.c:32:	var->next = NULL;
srcs/parameters/sh_isset.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/parameters/sh_isset.c:8:/*   Created: 2019/07/22 02:44:52 by ede-ram           #+#    #+#             */
srcs/parameters/sh_isset.c:9:/*   Updated: 2019/08/16 04:12:39 by ede-ram          ###   ########.fr       */
srcs/parameters/sh_isset.c:20:	env = sh()->params;
srcs/parameters/sh_isset.c:23:		if (!ft_strcmp(key, env->key))
srcs/parameters/sh_isset.c:25:		env = env->next;
srcs/parameters/sh_print_env.c:21:	lst = sh()->env;
srcs/parameters/sh_print_env.c:24:		ft_putstr(lst->key);
srcs/parameters/sh_print_env.c:26:		ft_putendl(lst->value);
srcs/parameters/sh_print_env.c:27:		lst = lst->next;
srcs/parameters/sh_putparams.c:20:		ft_putstr(param->key);
srcs/parameters/sh_putparams.c:22:		ft_putstr(param->value);
srcs/parameters/sh_putparams.c:24:		param = param->next;
srcs/parameters/sh_set_env.c:22:	tmp = sh()->env;
srcs/parameters/sh_set_env.c:26:		while (tmp->next != NULL && tmp->next != begin)
srcs/parameters/sh_set_env.c:27:			tmp = tmp->next;
srcs/parameters/sh_set_env.c:28:		tmp->next = sh_init_var(key, value);
srcs/parameters/sh_set_env.c:29:		tmp->next->next = NULL;
srcs/parameters/sh_set_env.c:37:	var = &(sh()->env);
srcs/parameters/sh_set_value.c:26:	ft_strdel(&(var->value));
srcs/parameters/sh_set_value.c:27:	var->value = ft_strdup(value);
srcs/parameters/sh_setenv.c:24:	if (!(env = sh()->params))
srcs/parameters/sh_setenv.c:25:		sh()->params = sh_create_param(key);
srcs/parameters/sh_setenv.c:26:	else if (ft_strcmp(env->key, key))
srcs/parameters/sh_setenv.c:28:		while (env->next && ft_strcmp(env->next->key, key))
srcs/parameters/sh_setenv.c:29:			env = env->next;
srcs/parameters/sh_setenv.c:30:		if (!env->next)
srcs/parameters/sh_setenv.c:31:			env->next = sh_create_param(key);
srcs/parameters/sh_setenv.c:32:		env = env->next;
srcs/parameters/sh_setenv.c:34:	if (value && env && env->readonly)
srcs/parameters/sh_setenv.c:36:		ft_putstr_fd(env->key, 2);
srcs/parameters/sh_setenv.c:41:		if (env->value)
srcs/parameters/sh_setenv.c:42:			ft_strdel(&(env->value));
srcs/parameters/sh_setenv.c:43:		env->value = ft_strdup(value);
srcs/parameters/sh_setenv.c:47:		if (env->value)
srcs/parameters/sh_setenv.c:48:			ft_strdel(&(env->value));
srcs/parameters/sh_unsetenv.c:23:	env = &(sh()->params);
srcs/parameters/sh_unsetenv.c:29:		*env = tgt->next;
srcs/parameters/sh_unsetenv.c:33:		while (tmp && tmp->next != tgt)
srcs/parameters/sh_unsetenv.c:34:			tmp = tmp->next;
srcs/parameters/sh_unsetenv.c:35:		if (tmp->next == tgt)
srcs/parameters/sh_unsetenv.c:36:			tmp->next = tgt->next;
srcs/parameters/sh_unsetenv.c:38:	ft_strdel(&(tgt->key));
srcs/parameters/sh_unsetenv.c:39:	ft_strdel(&(tgt->value));
srcs/signals/signals_handler.c:46:	// ioctl(term->fd, TIOCSTI, "\x1A");
srcs/signals/signals_handler.c:77:** 		"\x1A" used to mark end of a file (EOF). ctrl-z controller
srcs/tokenizer/compound_tokenizer.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/tokenizer/compound_tokenizer.c:8:/*   Created: 2019/06/14 02:44:30 by ede-ram           #+#    #+#             */
srcs/tokenizer/compound_tokenizer.c:9:/*   Updated: 2019/09/02 05:49:39 by ede-ram          ###   ########.fr       */
srcs/tokenizer/compound_tokenizer.c:24:	while (t->input[t->i] == '\n' || t->input[t->i] == ' ' || t->input[t->i] == '\t')
srcs/tokenizer/compound_tokenizer.c:25:		t->i++;
srcs/tokenizer/compound_tokenizer.c:30:	while (t->input[t->i] == ' ' || t->input[t->i] == '\t')
srcs/tokenizer/compound_tokenizer.c:31:		t->i++;
srcs/tokenizer/compound_tokenizer.c:39:	if (sh()->print_syntax_errors)
srcs/tokenizer/compound_tokenizer.c:50:	compound_token->sub = create_token(SH_GROUP, 0, 0);
srcs/tokenizer/compound_tokenizer.c:51:	if (!(compound_token->sub->sub = recursive_tokenizer(t, SH_WHILE, &next_separator)))
srcs/tokenizer/compound_tokenizer.c:53:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:55:			sh()->unfinished_cmd = 1;//free everywhere
srcs/tokenizer/compound_tokenizer.c:63:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:66:			sh()->unfinished_cmd = 1;//free everywhere
srcs/tokenizer/compound_tokenizer.c:71:	if (!(compound_token->sub->next = recursive_tokenizer(t, SH_DO, &next_separator)))
srcs/tokenizer/compound_tokenizer.c:74:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:76:			sh()->unfinished_cmd = 1;//free everywhere
srcs/tokenizer/compound_tokenizer.c:84:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:86:			sh()->unfinished_cmd = 1;//free everywhere
srcs/tokenizer/compound_tokenizer.c:100:	if (t->input[t->i] == '(')
srcs/tokenizer/compound_tokenizer.c:103:		t->i++;
srcs/tokenizer/compound_tokenizer.c:106:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:108:	if (word_begin != t->i && !ft_strncmp(t->input + word_begin, "esac", t->i - word_begin))
srcs/tokenizer/compound_tokenizer.c:115:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:118:	t->i = word_begin;
srcs/tokenizer/compound_tokenizer.c:119:	t_token	**previous_next = &(actual->sub);
srcs/tokenizer/compound_tokenizer.c:123:		word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:125:		if (t->i != word_begin && ft_strncmp(t->input + word_begin, ")", t->i - word_begin))
srcs/tokenizer/compound_tokenizer.c:127:			(*previous_next) = create_token_n(SH_WORD, word_begin, t->input + word_begin, t->i - word_begin);
srcs/tokenizer/compound_tokenizer.c:128:			dprintf(sh()->debug_fd, "case WORD : %s\n", (*previous_next)->content);
srcs/tokenizer/compound_tokenizer.c:129:			previous_next = &((*previous_next)->next);
srcs/tokenizer/compound_tokenizer.c:132:			t->i = word_begin;
srcs/tokenizer/compound_tokenizer.c:134:		if (t->input[t->i] != '|')
srcs/tokenizer/compound_tokenizer.c:136:		t->i++;
srcs/tokenizer/compound_tokenizer.c:138:	if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:140:		sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:143:	if (t->input[t->i] != ')')
srcs/tokenizer/compound_tokenizer.c:145:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:148:	t->i++;
srcs/tokenizer/compound_tokenizer.c:162:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:163:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:166:	if (!origin->sub)
srcs/tokenizer/compound_tokenizer.c:168:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:170:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:173:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:177:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:179:	if (t->i != word_begin && !ft_strncmp(t->input + word_begin, "esac", t->i - word_begin))
srcs/tokenizer/compound_tokenizer.c:183:		t->i = word_begin;
srcs/tokenizer/compound_tokenizer.c:184:		if (!(origin->sub->sub = recursive_tokenizer(t, SH_CASE, next_separator)) && *next_separator != SH_ESAC && *next_separator != SH_DSEMI)
srcs/tokenizer/compound_tokenizer.c:187:			if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:188:				sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:189:			return (handle_syntax_error(t, "unexpected non-WORD in CASE :expected ';;' or 'esac'", compound));
srcs/tokenizer/compound_tokenizer.c:200:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:202:	if (t->i == word_begin)
srcs/tokenizer/compound_tokenizer.c:204:	*compound_token = create_token_n(SH_CASE, case_index, t->input + word_begin, t->i - word_begin);
srcs/tokenizer/compound_tokenizer.c:213:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:215:	if (t->i == word_begin || ft_strncmp(t->input + word_begin, "in", t->i - word_begin))
srcs/tokenizer/compound_tokenizer.c:217:		t->i = word_begin;
srcs/tokenizer/compound_tokenizer.c:241:				sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:244:			sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:246:			return ((int)handle_syntax_error(t, "unexpected non-WORD in CASE :expected ';;' or 'esac'", compound));
srcs/tokenizer/compound_tokenizer.c:248:		previous_next = &((*previous_next)->next);
srcs/tokenizer/compound_tokenizer.c:259:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:262:	dprintf(sh()->debug_fd, "case name : %s\n", compound_token->content);
srcs/tokenizer/compound_tokenizer.c:266:		printf("-%c-\n", t->input[t->i]);
srcs/tokenizer/compound_tokenizer.c:267:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:269:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:272:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:275:	if (!tokenize_case_lists(t, &(compound_token->sub), compound_token))
srcs/tokenizer/compound_tokenizer.c:280:	//FirstMatch - SECONDMATCH-...
srcs/tokenizer/compound_tokenizer.c:293:	compound_token->sub = create_token(SH_GROUP, word_begin, 0);
srcs/tokenizer/compound_tokenizer.c:294:	if (!(compound_token->sub->sub = recursive_tokenizer(t, SH_IF, &next_separator)))
srcs/tokenizer/compound_tokenizer.c:296:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:298:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:301:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:306:		sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:311:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:314:	compound_token->sub->next = create_token(SH_GROUP, word_begin, 0);
srcs/tokenizer/compound_tokenizer.c:315:	if (!(compound_token->sub->next->sub = recursive_tokenizer(t, SH_THEN, &next_separator)))
srcs/tokenizer/compound_tokenizer.c:317:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:319:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:322:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:327:		sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:332:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:337:		if (!(compound_token->sub->next->next = tokenize_if(t, 0)))
srcs/tokenizer/compound_tokenizer.c:339:			if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:341:				sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:344:			sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:350:		if (!(compound_token->sub->next->next = recursive_tokenizer(t, SH_ELSE, &next_separator)))
srcs/tokenizer/compound_tokenizer.c:352:			if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:354:				sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:357:			sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:373:	word_begin = t->i + 1;
srcs/tokenizer/compound_tokenizer.c:374:	while (t->input[t->i] != ';' && t->input[t->i] != '\n' && (word_begin != t->i))
srcs/tokenizer/compound_tokenizer.c:377:		word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:379:		if (t->i != word_begin)
srcs/tokenizer/compound_tokenizer.c:381:			actual->next = create_token_n(SH_WORD, word_begin, t->input + word_begin, t->i - word_begin);
srcs/tokenizer/compound_tokenizer.c:382:			actual = actual->next;
srcs/tokenizer/compound_tokenizer.c:386:	if (t->input[t->i] != ';' && t->input[t->i] != '\n')
srcs/tokenizer/compound_tokenizer.c:389:		printf("SYNTAX_ERROR: invalid WORD in FOR at -%.10s\n: expected ';' or '\\n'\n", t->input + t->i);
srcs/tokenizer/compound_tokenizer.c:392:	actual = origin->next;
srcs/tokenizer/compound_tokenizer.c:404:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:406:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:409:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:414:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:416:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:419:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:430:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:432:	if (t->i == word_begin)
srcs/tokenizer/compound_tokenizer.c:434:	compound_token->sub = create_token_n(SH_WORD, word_begin, t->input + word_begin, t->i - word_begin);
srcs/tokenizer/compound_tokenizer.c:443:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:445:	if (t->i != word_begin && !ft_strncmp(t->input + word_begin, "in", t->i - word_begin))
srcs/tokenizer/compound_tokenizer.c:447:		if (!(compound_token->sub->sub = tokenize_for_wordlist(t)))
srcs/tokenizer/compound_tokenizer.c:451:		t->i = word_begin;
srcs/tokenizer/compound_tokenizer.c:459:	word_begin = t->i;
srcs/tokenizer/compound_tokenizer.c:461:	if (t->i == word_begin || ft_strncmp(t->input + word_begin, "do", t->i - word_begin))
srcs/tokenizer/compound_tokenizer.c:463:	if (!compound->sub->sub)
srcs/tokenizer/compound_tokenizer.c:464:		compound->sub->sub = create_token(0, 0, 0);
srcs/tokenizer/compound_tokenizer.c:465:	if (!(compound->sub->sub->sub = tokenize_for_do_group(t, compound)))
srcs/tokenizer/compound_tokenizer.c:477:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:483:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:485:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:488:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:492:	if (t->input[t->i] == ';')
srcs/tokenizer/compound_tokenizer.c:493:		t->i++;
srcs/tokenizer/compound_tokenizer.c:494:	else if (compound_token->sub->sub && t->input[t->i] != '\n')
srcs/tokenizer/compound_tokenizer.c:496:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:498:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:501:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:507:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:509:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:512:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:524:	if (!(compound->sub = recursive_tokenizer(t, SH_BRACES, &terminator)))
srcs/tokenizer/compound_tokenizer.c:526:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:528:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:531:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:536:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:538:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:541:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:553:	if (!(compound->sub = recursive_tokenizer(t, SH_SUBSH, &terminator)))
srcs/tokenizer/compound_tokenizer.c:555:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:557:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:560:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:565:		if (!t->input[t->i])
srcs/tokenizer/compound_tokenizer.c:567:			sh()->unfinished_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:570:		sh()->invalid_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:581:	if (sh()->nb_nested_tokenized_compounds >= SH_NESTED_TOKENIZED_COMPOUND_LIMIT)
srcs/tokenizer/compound_tokenizer.c:583:		sh()->abort_cmd = 1;
srcs/tokenizer/compound_tokenizer.c:584:		sh()->print_syntax_errors = 0;
srcs/tokenizer/compound_tokenizer.c:588:	tmp = t->word_nb;
srcs/tokenizer/compound_tokenizer.c:589:	t->word_nb = 1;
srcs/tokenizer/compound_tokenizer.c:590:	sh()->nb_nested_tokenized_compounds++;
srcs/tokenizer/compound_tokenizer.c:603:	t->word_nb = tmp + 1;
srcs/tokenizer/compound_tokenizer.c:604:	sh()->nb_nested_tokenized_compounds--;
srcs/tokenizer/opening_chars_handling.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/tokenizer/opening_chars_handling.c:8:/*   Created: 2019/06/13 02:38:16 by ede-ram           #+#    #+#             */
srcs/tokenizer/opening_chars_handling.c:22:	if (t->input[t->i] == '(')
srcs/tokenizer/opening_chars_handling.c:24:	else if (t->input[t->i] == '$')
srcs/tokenizer/opening_chars_handling.c:26:		if (t->input[t->i + 1] == '(')
srcs/tokenizer/opening_chars_handling.c:28:			if (t->input[t->i + 2] == '(')
srcs/tokenizer/opening_chars_handling.c:32:		else if (t->input[t->i + 1] == '{')
srcs/tokenizer/opening_chars_handling.c:35:	else if (t->input[t->i] == '\'')
srcs/tokenizer/opening_chars_handling.c:37:	else if (t->input[t->i] == '"')
srcs/tokenizer/opening_chars_handling.c:39:	else if (t->input[t->i] == '`')
srcs/tokenizer/opening_chars_handling.c:85:	while (t->input[t->i])
srcs/tokenizer/opening_chars_handling.c:88:			escaped--;
srcs/tokenizer/opening_chars_handling.c:89:		if (!escaped && t->input[t->i] == '\\')
srcs/tokenizer/opening_chars_handling.c:91:		if (!escaped && !ft_strncmp(ending_sequence, t->input + t->i, len) && (t->i += len))
srcs/tokenizer/opening_chars_handling.c:99:			t->i++;
srcs/tokenizer/opening_chars_handling.c:105:	if (t->input[t->i] == '(')
srcs/tokenizer/opening_chars_handling.c:107:		t->i++;
srcs/tokenizer/opening_chars_handling.c:110:	else if (t->input[t->i] == '$')
srcs/tokenizer/opening_chars_handling.c:112:		t->i++;
srcs/tokenizer/opening_chars_handling.c:113:		if (t->input[t->i] == '(')
srcs/tokenizer/opening_chars_handling.c:115:			t->i++;
srcs/tokenizer/opening_chars_handling.c:116:			if (t->input[t->i] == '(')
srcs/tokenizer/opening_chars_handling.c:118:				t->i++;
srcs/tokenizer/opening_chars_handling.c:123:		else if (t->input[t->i] == '{')
srcs/tokenizer/opening_chars_handling.c:125:			t->i++;
srcs/tokenizer/opening_chars_handling.c:129:	else if (t->input[t->i] == '\'')
srcs/tokenizer/opening_chars_handling.c:131:		t->i++;
srcs/tokenizer/opening_chars_handling.c:134:	else if (t->input[t->i] == '"')
srcs/tokenizer/opening_chars_handling.c:136:		t->i++;
srcs/tokenizer/opening_chars_handling.c:139:	else if (t->input[t->i] == '`')
srcs/tokenizer/opening_chars_handling.c:141:		t->i++;
srcs/tokenizer/operator_interpreter.c:9:/*   Updated: 2019/08/25 04:38:45 by ede-ram          ###   ########.fr       */
srcs/tokenizer/operator_interpreter.c:23:	if (t->input[t->i] != ';')
srcs/tokenizer/operator_interpreter.c:25:	t->i++;
srcs/tokenizer/operator_interpreter.c:26:	if (t->input[t->i] == ';')
srcs/tokenizer/operator_interpreter.c:28:		t->i++;
srcs/tokenizer/operator_interpreter.c:36:	if (t->input[t->i] == '&')
srcs/tokenizer/operator_interpreter.c:38:		t->i++;
srcs/tokenizer/operator_interpreter.c:39:		if (t->input[t->i] == '&')
srcs/tokenizer/operator_interpreter.c:41:			t->i++;
srcs/tokenizer/operator_interpreter.c:46:	else if (t->input[t->i] == '|')
srcs/tokenizer/operator_interpreter.c:48:		t->i++;
srcs/tokenizer/operator_interpreter.c:49:		if (t->input[t->i] == '|')
srcs/tokenizer/operator_interpreter.c:51:			t->i++;
srcs/tokenizer/operator_interpreter.c:61:	if (t->input[t->i] != '>')
srcs/tokenizer/operator_interpreter.c:63:	t->i++;
srcs/tokenizer/operator_interpreter.c:64:	if (t->input[t->i] == '>')
srcs/tokenizer/operator_interpreter.c:66:		t->i++;
srcs/tokenizer/operator_interpreter.c:69:	else if (t->input[t->i] == '|')
srcs/tokenizer/operator_interpreter.c:71:		t->i++;
srcs/tokenizer/operator_interpreter.c:74:	else if (t->input[t->i] == '&')
srcs/tokenizer/operator_interpreter.c:76:		t->i++;
srcs/tokenizer/operator_interpreter.c:84:	if (t->input[t->i] != '<')
srcs/tokenizer/operator_interpreter.c:86:	t->i++;
srcs/tokenizer/operator_interpreter.c:87:	if (t->input[t->i] == '<')
srcs/tokenizer/operator_interpreter.c:89:		t->i++;
srcs/tokenizer/operator_interpreter.c:90:		if (t->input[t->i] == '-')
srcs/tokenizer/operator_interpreter.c:92:			t->i++;
srcs/tokenizer/operator_interpreter.c:97:	else if (t->input[t->i] == '&')
srcs/tokenizer/operator_interpreter.c:99:		t->i++;
srcs/tokenizer/operator_interpreter.c:102:	else if (t->input[t->i] == '>')
srcs/tokenizer/operator_interpreter.c:104:		t->i++;
srcs/tokenizer/operator_interpreter.c:149:	word_begin = t->i;
srcs/tokenizer/operator_interpreter.c:151:	if (word_begin == t->i)
srcs/tokenizer/operator_interpreter.c:153:		sh()->unfinished_cmd = 1;
srcs/tokenizer/operator_interpreter.c:156:	word_len = t->i - word_begin + 1;
srcs/tokenizer/operator_interpreter.c:158:	here_doc_begin = t->i;
srcs/tokenizer/operator_interpreter.c:159:	while (ft_strncmp(t->input + word_begin, t->input + t->i, word_len) || t->i + word_len != '\n')
srcs/tokenizer/operator_interpreter.c:162:		t->i = ft_strchr(t->input + t->i, '\n') - t->input;
srcs/tokenizer/operator_interpreter.c:163:		if (t->i < 0)
srcs/tokenizer/operator_interpreter.c:165:			sh()->unfinished_cmd = 1;
srcs/tokenizer/operator_interpreter.c:169:	if (!((*p_actual)->content = ft_strndup(t->input + here_doc_begin, t->i - here_doc_begin)))
srcs/tokenizer/operator_interpreter.c:180:	op_begin = t->i;
srcs/tokenizer/operator_interpreter.c:183:		if (type == SH_AND && (t->input[t->i] == '<' || t->input[t->i] == '>'))
srcs/tokenizer/operator_interpreter.c:185:			t->i--;
srcs/tokenizer/operator_interpreter.c:190:		(*p_actual)->next = create_token(type, op_begin, 0);
srcs/tokenizer/operator_interpreter.c:191:		*p_actual = (*p_actual)->next;
srcs/tokenizer/operator_interpreter.c:192:		if (t->word_nb == 1 && operator_cant_be_first(type))
srcs/tokenizer/operator_interpreter.c:194:			printf("SYNTAX ERROR: operator cant be first in command -%.10s\n", t->input + ((t->i > 2) ? t->i - 2 : 0));
srcs/tokenizer/operator_interpreter.c:198:			t->word_nb = 1;
srcs/tokenizer/t_token.c:27:		if (tok_begin->type == (*types)[0] || tok_begin->type == (*types)[1])
srcs/tokenizer/t_token.c:30:				*type = tok_begin->type;
srcs/tokenizer/t_token.c:33:		tok_begin = tok_begin->next;
srcs/tokenizer/t_token.c:36:		*type = (tok_begin) ? tok_begin->type : 0;
srcs/tokenizer/t_token.c:48:	tok->content = dupfilsdup(content);
srcs/tokenizer/t_token.c:49:	tok->type = type;
srcs/tokenizer/t_token.c:50:	tok->index = index;
srcs/tokenizer/t_token.c:51:	tok->sub = 0;
srcs/tokenizer/t_token.c:52:	tok->next = 0;
srcs/tokenizer/t_token.c:62:	if (!(tok->content = ft_strndup(content, n)))
srcs/tokenizer/t_token.c:64:	tok->type = type;
srcs/tokenizer/t_token.c:65:	tok->index = index;
srcs/tokenizer/t_token.c:66:	tok->sub = 0;
srcs/tokenizer/t_token.c:67:	tok->next = 0;
srcs/tokenizer/t_token.c:77:	new = create_token(origin->type, origin->index, origin->content);
srcs/tokenizer/t_token.c:78:	new->sub = dup_ast(origin->sub);
srcs/tokenizer/t_token.c:79:	new->next = dup_ast(origin->next);
srcs/tokenizer/t_token.c:89:	new = create_token(origin->type, origin->index, origin->content);
srcs/tokenizer/t_token.c:90:	new->sub = dup_ast(origin->sub);
srcs/tokenizer/t_token.c:96:	free(tok->content);
srcs/tokenizer/t_token.c:104:	free_ast(origin->sub);
srcs/tokenizer/t_token.c:105:	free_ast(origin->next);
srcs/tokenizer/tokenize_input.c:9:/*   Updated: 2019/09/02 06:31:41 by ede-ram          ###   ########.fr       */
srcs/tokenizer/tokenize_input.c:36:	if (t->input[t->i] == '(' || t->input[t->i] == ')')
srcs/tokenizer/tokenize_input.c:38:		t->i++;
srcs/tokenizer/tokenize_input.c:43:	while (t->input[t->i])
srcs/tokenizer/tokenize_input.c:46:			escaped--;
srcs/tokenizer/tokenize_input.c:47:		if (!escaped && t->input[t->i] == '\\')
srcs/tokenizer/tokenize_input.c:49:		if (!escaped && !is_word_char(t->input[t->i]))
srcs/tokenizer/tokenize_input.c:51:		tmp = t->i;
srcs/tokenizer/tokenize_input.c:55:			n += t->i - tmp;
srcs/tokenizer/tokenize_input.c:59:			t->i++;
srcs/tokenizer/tokenize_input.c:71:	while (ft_isdigit(t->input[t->i + j]))
srcs/tokenizer/tokenize_input.c:73:	if (t->input[t->i + j] == '<' || t->input[t->i + j] == '>')
srcs/tokenizer/tokenize_input.c:85:	word_begin = t->i;
srcs/tokenizer/tokenize_input.c:88:		//printf("%s\n", t->input + t->i);
srcs/tokenizer/tokenize_input.c:89:		if (!t->input[t->i])
srcs/tokenizer/tokenize_input.c:90:			sh()->unfinished_cmd = 1;
srcs/tokenizer/tokenize_input.c:92:			printf("GRAMMAR ERROR: expected WORD after redirection_operator at -%.10s\n", t->input + t->i - ((t->i - 4 > -1) ? 4 : 2));
srcs/tokenizer/tokenize_input.c:95:	(*p_actual)->sub = create_token_n(SH_WORD, word_begin, t->input + word_begin, t->i - word_begin);
srcs/tokenizer/tokenize_input.c:103:	(*p_actual)->next = create_token_n(0, t->i, t->input + t->i, len);
srcs/tokenizer/tokenize_input.c:104:	t->i += len;
srcs/tokenizer/tokenize_input.c:106:	*p_actual = (*p_actual)->next;
srcs/tokenizer/tokenize_input.c:107:	(*p_actual)->type = type;
srcs/tokenizer/tokenize_input.c:115:		if (!((*p_actual)->next = tokenize_compound(t, type, word_begin)))
srcs/tokenizer/tokenize_input.c:119:		(*p_actual)->next = create_token(type, word_begin, 0);
srcs/tokenizer/tokenize_input.c:128:	while (ft_isblank(t->input[t->i + tmp]))
srcs/tokenizer/tokenize_input.c:130:	if (t->input[t->i + tmp++] != '(')
srcs/tokenizer/tokenize_input.c:132:	while (ft_isblank(t->input[t->i + tmp]))
srcs/tokenizer/tokenize_input.c:134:	if (t->input[t->i + tmp++] != ')')
srcs/tokenizer/tokenize_input.c:145:	if (t->input[t->i] == '{')
srcs/tokenizer/tokenize_input.c:148:		t->i++;
srcs/tokenizer/tokenize_input.c:152:		word_begin = t->i;
srcs/tokenizer/tokenize_input.c:154:		if (!(type = word_is_reserved(t->input + word_begin, t->i - word_begin)) || !is_compound(type))
srcs/tokenizer/tokenize_input.c:156:			if (!t->input[t->i])
srcs/tokenizer/tokenize_input.c:157:				sh()->unfinished_cmd = 1;
srcs/tokenizer/tokenize_input.c:159:				printf("SYNTAX ERROR: Function block need to be a compound at %.10s\n", t->input + word_begin);
srcs/tokenizer/tokenize_input.c:163:	word_begin = t->i;
srcs/tokenizer/tokenize_input.c:164:	t->i = name_begin;
srcs/tokenizer/tokenize_input.c:166:	(*p_actual)->next = create_token_n(SH_FUNC, name_begin, t->input + name_begin, t->i - name_begin);
srcs/tokenizer/tokenize_input.c:167:	*p_actual = (*p_actual)->next;
srcs/tokenizer/tokenize_input.c:168:	(*p_actual)->sub = create_token(SH_GROUP, 0, 0);
srcs/tokenizer/tokenize_input.c:169:	t->i = word_begin;
srcs/tokenizer/tokenize_input.c:170:	if (!((*p_actual)->sub->sub = tokenize_compound(t, type, word_begin)))
srcs/tokenizer/tokenize_input.c:172:	//tokenize optional IO to exec when executing the func (yo() {echo yo } 1>/dev/null;) in (*p_actual)->sub
srcs/tokenizer/tokenize_input.c:176:	//--redirections
srcs/tokenizer/tokenize_input.c:197:	i = t->i;
srcs/tokenizer/tokenize_input.c:201:		t->i = i;
srcs/tokenizer/tokenize_input.c:202:		t->word_nb = 1;
srcs/tokenizer/tokenize_input.c:216:	word_begin = t->i;
srcs/tokenizer/tokenize_input.c:219:		if (t->word_nb == 1 && (len = next_is_parenthesis(t)))
srcs/tokenizer/tokenize_input.c:221:			t->i += len;
srcs/tokenizer/tokenize_input.c:224:		if ((type = word_is_actual_terminator(t->input + word_begin, t->i - word_begin, actual_compound)) && (t->word_nb == 1 || type == SH_SUBSH_END))
srcs/tokenizer/tokenize_input.c:226:		if (t->word_nb == 1 && (type = word_is_reserved(t->input + word_begin, t->i - word_begin)))
srcs/tokenizer/tokenize_input.c:230:				printf("Unexpected token at -%s\n", t->input + word_begin);
srcs/tokenizer/tokenize_input.c:231:				sh()->invalid_cmd = 1;
srcs/tokenizer/tokenize_input.c:239:			(*p_actual)->next = create_token_n(SH_WORD, word_begin, t->input + word_begin, t->i - word_begin);
srcs/tokenizer/tokenize_input.c:240:			//if (t->word_nb == 1)
srcs/tokenizer/tokenize_input.c:241:			//	while (is_unquoted_valid_alias_name(token->content))
srcs/tokenizer/tokenize_input.c:242:			//		(*p_actual)->next = retokenize_alias((*p_actual)->next);
srcs/tokenizer/tokenize_input.c:243:			t->word_nb++;
srcs/tokenizer/tokenize_input.c:245:		*p_actual = (*p_actual)->next;
srcs/tokenizer/tokenize_input.c:253:	while (t->input[t->i] == '\n')
srcs/tokenizer/tokenize_input.c:255:		(*p_actual)->next = create_token(SH_NEWLINE, t->i, 0);
srcs/tokenizer/tokenize_input.c:256:		*p_actual = (*p_actual)->next;
srcs/tokenizer/tokenize_input.c:257:		t->i++;
srcs/tokenizer/tokenize_input.c:258:		t->word_nb = 1;
srcs/tokenizer/tokenize_input.c:272:	while (!*terminator && t->input[t->i])
srcs/tokenizer/tokenize_input.c:279:	actual = origin->next;
srcs/tools/ft_join_with_char.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/tools/ft_join_with_char.c:8:/*   Created: 2019/09/02 09:14:55 by ede-ram           #+#    #+#             */
srcs/tools/ft_join_with_char.c:9:/*   Updated: 2019/09/02 09:26:44 by ede-ram          ###   ########.fr       */
srcs/tools/list_tools.c:23:	elem->key = NULL;
srcs/tools/list_tools.c:24:	elem->value = NULL;
srcs/tools/list_tools.c:25:	elem->next = next;
srcs/tools/list_tools.c:31:	while (list->next)
srcs/tools/list_tools.c:33:		if (!ft_strcmp(list->key, str))
srcs/tools/list_tools.c:35:		list = list->next;
srcs/tools/list_tools.c:44:		if ((*list)->next)
srcs/tools/list_tools.c:45:			lst_del(&((*list)->next));
srcs/tools/list_tools.c:46:		ft_strdel(&((*list)->key));
srcs/tools/list_tools.c:47:		ft_strdel(&((*list)->value));
srcs/tools/list_tools.c:58:	while (list->next)
srcs/tools/list_tools.c:59:		list = list->next;
srcs/tools/list_tools.c:70:	while (list->next)
srcs/tools/list_tools.c:72:		list = list->next;
srcs/tools/sh_are_you_sur.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/tools/sh_are_you_sur.c:8:/*   Created: 2019/07/11 02:45:55 by ede-ram           #+#    #+#             */
srcs/tools/sh_are_you_sur.c:9:/*   Updated: 2019/07/11 02:47:14 by ede-ram          ###   ########.fr       */
srcs/tools/sh_check_path.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/tools/sh_check_path.c:8:/*   Created: 2019/07/11 02:47:34 by ede-ram           #+#    #+#             */
srcs/tools/sh_check_path.c:25:	if (stat(path, &s) == -1)
srcs/tools/sh_check_path.c:35:	if (c != '\0' && access(path, mode) == -1)
srcs/tools/sh_check_path.c:50:		exit(-1);
srcs/tools/sh_error_path.c:6:/*   By: ede-ram <marvin@42.fr>                     +#+  +:+       +#+        */
srcs/tools/sh_error_path.c:8:/*   Created: 2019/07/11 02:49:50 by ede-ram           #+#    #+#             */
srcs/tools/sh_error_path.c:26:	return (-1);
srcs/tools/sh_find_law.c:19:		exit(-1);
srcs/tools/sh_find_law.c:21:	i = -1;
srcs/tools/sh_find_law.c:37:			law[i] = '-';
srcs/tools/sh_getopt.c:24:	tmp->name = ft_strdup(name);
srcs/tools/sh_getopt.c:25:	tmp->arg = ft_strdup(content);
srcs/tools/sh_getopt.c:26:	tmp->next = NULL;
srcs/tools/sh_getopt.c:38:	if (!(*ac - 1 && *av + 1) || (*av)[1][0] != '-')
srcs/tools/sh_getopt.c:40:	(*ac)--;
srcs/tools/sh_getopt.c:67:			if (!(tmp->next = sh_create_opt((**av)[i], arg)))
srcs/tools/sh_getopt.c:69:			tmp = tmp->next;
srcs/tools/sh_getopt.c:74:		(*ac)--;
srcs/tools/sh_getopt.c:77:	tmp->next = sh_getopt(ac, av, optstr);
srcs/word_expansion/sh_expansion_size.c:26:			bquote--;
srcs/word_expansion/sh_expansion_size.c:46:			&& content[i] != '"' &&  content[i] != '-'
srcs/word_expansion/sh_expansion_size.c:64:		return (sh_simple_word(content, i) - size);
srcs/word_expansion/sh_expansion_size.c:66:		return (sh_complex_word(content, i) - size);
srcs/word_expansion/sh_quote_removal.c:24:		exit (-1);
srcs/word_expansion/sh_quote_removal.c:44:			exit (-1);
srcs/word_expansion/sh_quote_removal.c:48:		if (!((*new)->next = (t_token*)create_token(SH_WORD, 0, NULL)))
srcs/word_expansion/sh_quote_removal.c:49:			exit (-1);
srcs/word_expansion/sh_quote_removal.c:50:		*new = (*new)->next;
srcs/word_expansion/sh_quote_removal.c:52:	(*new)->sub = NULL;
srcs/word_expansion/sh_quote_removal.c:53:	(*new)->next = NULL;
srcs/word_expansion/sh_quote_removal.c:62:	cpy = splt->tok->content;
srcs/word_expansion/sh_quote_removal.c:64:	sh_next_token(&(splt->sub));
srcs/word_expansion/sh_quote_removal.c:65:	if (!(splt->sub->content = (char*)malloc(splt->i + 1)))
srcs/word_expansion/sh_quote_removal.c:66:		exit (-1);
srcs/word_expansion/sh_quote_removal.c:67:	if (!(splt->tok->content = (char*)malloc(ft_strlen(cpy) - splt->i + 1)))
srcs/word_expansion/sh_quote_removal.c:68:		exit (-1);
srcs/word_expansion/sh_quote_removal.c:69:	while (j != splt->i)
srcs/word_expansion/sh_quote_removal.c:71:		splt->sub->content[j] = cpy[j];
srcs/word_expansion/sh_quote_removal.c:74:	splt->sub->content[j] = '\0';
srcs/word_expansion/sh_quote_removal.c:76:	splt->i++;
srcs/word_expansion/sh_quote_removal.c:77:	while (cpy[splt->i])
srcs/word_expansion/sh_quote_removal.c:78:		splt->tok->content[j++] = cpy[(splt->i)++];
srcs/word_expansion/sh_quote_removal.c:79:	splt->tok->content[j] = '\0';
srcs/word_expansion/sh_quote_removal.c:81:	splt->i = 0;
srcs/word_expansion/sh_quote_removal.c:89:	while (splt->split[j])
srcs/word_expansion/sh_quote_removal.c:91:		if (splt->split[j] == splt->tok->content[splt->i])
srcs/word_expansion/sh_quote_removal.c:100:	if (splt->tok->content[splt->i] == '\'')
srcs/word_expansion/sh_quote_removal.c:102:		sh_remove_car(&(splt->tok->content), splt->i);
srcs/word_expansion/sh_quote_removal.c:108:	else if (splt->tok->content[splt->i] == '"')
srcs/word_expansion/sh_quote_removal.c:110:		sh_remove_car(&(splt->tok->content), splt->i);
srcs/word_expansion/sh_quote_removal.c:124:	while (splt->tok->content[splt->i])
srcs/word_expansion/sh_quote_removal.c:127:			bquote--;
srcs/word_expansion/sh_quote_removal.c:128:		if (splt->tok->content[splt->i] == '\\')
srcs/word_expansion/sh_quote_removal.c:130:			sh_remove_car(&(splt->tok->content), splt->i);
srcs/word_expansion/sh_quote_removal.c:140:		splt->i++;
srcs/word_expansion/sh_quote_removal.c:152:	if (splt.tok && (splt.tok->content))
srcs/word_expansion/sh_tilde_expansion.c:17:	while (*env_cpy && ft_strcmp((*env_cpy)->key, find) != 0)
srcs/word_expansion/sh_tilde_expansion.c:18:		*env_cpy = (*env_cpy)->next;
srcs/word_expansion/sh_tilde_expansion.c:32:	j = -1;
srcs/word_expansion/sh_tilde_expansion.c:34:		exit(-1); //malloc error
srcs/word_expansion/sh_tilde_expansion.c:51:		(*home) = ft_strdup(env_cpy->value);
srcs/word_expansion/sh_tilde_expansion.c:57:		data = getpwnam(env_cpy->value);
srcs/word_expansion/sh_tilde_expansion.c:59:			(*home) = ft_strdup(data->pw_dir);
srcs/word_expansion/sh_word_expansion.c:17:	exp->first_i = 0;
srcs/word_expansion/sh_word_expansion.c:18:	exp->i = 0;
srcs/word_expansion/sh_word_expansion.c:19:	exp->find = *env;
srcs/word_expansion/sh_word_expansion.c:20:	exp->env = env;
srcs/word_expansion/sh_word_expansion.c:21:	exp->name = NULL;
srcs/word_expansion/sh_word_expansion.c:22:	exp->value = NULL;
srcs/word_expansion/sh_word_expansion.c:23:	exp->opt = 0;
srcs/word_expansion/sh_word_expansion.c:24:	printf("sh_init_exp tok = %s\n", tok->content);
srcs/word_expansion/sh_word_expansion.c:25:	exp->content = ft_strdup((tok->content));
srcs/word_expansion/sh_word_expansion.c:30:	if (exp->value)
srcs/word_expansion/sh_word_expansion.c:31:		free(exp->value);
srcs/word_expansion/sh_word_expansion.c:32:	if (exp->content)
srcs/word_expansion/sh_word_expansion.c:33:		free(exp->content);
srcs/word_expansion/sh_word_expansion.c:34:	if (exp->name)
srcs/word_expansion/sh_word_expansion.c:35:		free(exp->name);
srcs/word_expansion/sh_word_expansion.c:36:	exp->name = NULL;
srcs/word_expansion/sh_word_expansion.c:37:	exp->value = NULL;
srcs/word_expansion/sh_word_expansion.c:38:	exp->content = NULL;
srcs/word_expansion/sh_word_expansion.c:44:	write(2, exp->name, ft_strlen(exp->name));
srcs/word_expansion/sh_word_expansion.c:46:	write(2, exp->value, ft_strlen(exp->value));
srcs/word_expansion/sh_word_expansion.c:61:	i = -1;
srcs/word_expansion/sh_word_expansion.c:62:	cpy = (*tok)->content;
srcs/word_expansion/sh_word_expansion.c:65:	j = exp.first_i + sh_expansion_size((*tok)->content, exp.first_i) + 1;
srcs/word_expansion/sh_word_expansion.c:66:	size = ft_strlen(cpy) - sh_expansion_size((*tok)->content, exp.first_i) + value_size;
srcs/word_expansion/sh_word_expansion.c:67:	if (!((*tok)->content = malloc(size)))
srcs/word_expansion/sh_word_expansion.c:68:		exit (-1);
srcs/word_expansion/sh_word_expansion.c:70:		(*tok)->content[i] = cpy[i];
srcs/word_expansion/sh_word_expansion.c:73:		(*tok)->content[exp.first_i++] = exp.value[i++];
srcs/word_expansion/sh_word_expansion.c:75:		(*tok)->content[exp.first_i++] = cpy[j++];
srcs/word_expansion/sh_word_expansion.c:76:	(*tok)->content[exp.first_i] = '\0';
srcs/word_expansion/sh_word_expansion.c:77:	printf("sh_sub_token = %s\n", (*tok)->content);
srcs/word_expansion/sh_word_expansion.c:85:	printf("sh_word_expansion tok = %s\n", (*tok)->content);
srcs/word_expansion/sh_word_expansion.c:89:	while ((*tok) && (*tok)->content && ((*tok)->content)[exp.i])
srcs/word_expansion/sh_word_expansion.c:92:		if ((*tok)->content[exp.i] == '$')
srcs/word_expansion/sh_word_expansion.c:98:	//		else if (((*tok)->content)[i] == '('
srcs/word_expansion/sh_word_expansion.c:99:	//				&& ((*tok)->content)[i + 1] == '(')
srcs/word_expansion/sh_word_expansion.c:100:	//			sh_arithmetique_expanssion(&((*tok)->content), i + 2, env);
srcs/word_expansion/sh_word_expansion.c:103:			exp.content = ft_strdup((*tok)->content);
srcs/word_expansion/sh_word_expansion.c:104:			exp.i = exp.first_i - 1;
srcs/word_expansion/sh_word_expansion.c:120:	printf("sh_expansion tok = %s\n", tok->content);
srcs/word_expansion/sh_word_expansion.c:121:	if (!(new_tok = create_token(SH_WORD, 0, tok->content)))
srcs/word_expansion/sh_word_expansion.c:122:		exit (-1);
srcs/word_expansion/sh_word_expansion.c:123:	printf("START TOKEN=%s\n", new_tok->content);
srcs/word_expansion/sh_word_expansion.c:124:	new_tok->sub = NULL;
srcs/word_expansion/sh_word_expansion.c:125:	new_tok->next = NULL;
srcs/word_expansion/sh_word_expansion.c:128:	printf("FINAL TOKEN=%s\n", new_tok->content);
srcs/word_expansion/sh_word_expansion.c:130:	printf("FINAL TOKEN=%s\n", new_tok->content);
srcs/word_expansion/sh_word_expression.c:20:	j = exp->i;
srcs/word_expansion/sh_word_expression.c:22:	while (exp->content[j] != '}')
srcs/word_expansion/sh_word_expression.c:27:	if (exp->value)
srcs/word_expansion/sh_word_expression.c:28:		free(exp->value);
srcs/word_expansion/sh_word_expression.c:29:	if (!(exp->value = malloc(size + 1)))
srcs/word_expansion/sh_word_expression.c:30:		exit (-1);
srcs/word_expansion/sh_word_expression.c:32:	while (exp->content[exp->i] != '}')
srcs/word_expansion/sh_word_expression.c:33:		exp->value[j++] = exp->content[exp->i++];
srcs/word_expansion/sh_word_expression.c:34:	exp->value[j] = '\0';
srcs/word_expansion/sh_word_expression.c:35:	printf("exp->value in subword = %s\n", exp->value);
srcs/word_expansion/sh_word_expression.c:40:	if (sh_tilde_expansion(&(exp->content), *(exp->env)) == 1)
srcs/word_expansion/sh_word_expression.c:42:	if ((exp->content)[exp->i] == '$')
srcs/word_expansion/sh_word_expression.c:44:		exp->i++;
srcs/word_expansion/sh_word_expression.c:45:		if ((exp->content)[exp->i] == '{')
srcs/word_expansion/sh_word_expression.c:47://		else if (((*exp->content)[i] == '('
srcs/word_expansion/sh_word_expression.c:48://				&& ((*exp->content)[i + 1] == '(')
srcs/word_expansion/sh_word_expression.c:49://			sh_arithmetique_expanssion(&((*exp->content), i + 2, env);
srcs/word_expansion/sh_word_expression.c:61:	i = exp->i;
srcs/word_expansion/sh_word_expression.c:62:	free(exp->content);
srcs/word_expansion/sh_word_expression.c:63:	if (!(exp->content = malloc(ft_strlen(exp->content - i + 1))))
srcs/word_expansion/sh_word_expression.c:64:		exit(-1);
srcs/word_expansion/sh_word_expression.c:65:	while ((exp->content)[i])
srcs/word_expansion/sh_word_expression.c:66:		exp->content[j++] = exp->content[i++];
srcs/word_expansion/sh_word_expression.c:67:	exp->content[j] = '\0';
srcs/word_expansion/sh_word_expression.c:72:	exp->find = (*exp->env);
srcs/word_expansion/sh_word_expression.c:73:	while (exp->find->next)
srcs/word_expansion/sh_word_expression.c:74:		exp->find = exp->find->next;
srcs/word_expansion/sh_word_expression.c:75:	if (!(exp->find->next = malloc(sizeof(t_env))))
srcs/word_expansion/sh_word_expression.c:76:		exit(-1);
srcs/word_expansion/sh_word_expression.c:77:	exp->find = exp->find->next;
srcs/word_expansion/sh_word_expression.c:78:	exp->find->key = ft_strdup(exp->name);
srcs/word_expansion/sh_word_expression.c:79:	exp->find->value = ft_strdup(exp->value);
srcs/word_expansion/sh_word_expression.c:89:	if (exp->find)
srcs/word_expansion/sh_word_expression.c:91:		if (exp->find->value)
srcs/word_expansion/sh_word_expression.c:92:			free(exp->find->value);
srcs/word_expansion/sh_word_expression.c:93:		exp->find->value = ft_strdup(exp->value);
srcs/word_expansion/sh_word_expression.c:101:	exp->i++;
srcs/word_expansion/sh_word_expression.c:102:	if (exp->find && exp->find->value)
srcs/word_expansion/sh_word_expression.c:103:		exp->value = ft_strdup(exp->find->value);
srcs/word_expansion/sh_word_expression.c:104:	else if ((exp->find && !(exp->find->value) && exp->opt & COLON) || !(exp->find))
srcs/word_expansion/sh_word_expression.c:110:		exp->value = NULL;
srcs/word_expansion/sh_word_expression.c:115:	exp->i++;
srcs/word_expansion/sh_word_expression.c:116:	if (exp->find && exp->find->value)
srcs/word_expansion/sh_word_expression.c:117:		exp->value = ft_strdup(exp->find->value);
srcs/word_expansion/sh_word_expression.c:118:	else if (exp->find && !exp->find->value && !(exp->opt & COLON))
srcs/word_expansion/sh_word_expression.c:119:		exp->value = NULL;
srcs/word_expansion/sh_word_expression.c:126:	exp->i++;
srcs/word_expansion/sh_word_expression.c:127:	if (exp->find && exp->find->value)
srcs/word_expansion/sh_word_expression.c:128:		exp->value = ft_strdup(exp->find->value);
srcs/word_expansion/sh_word_expression.c:129:	else if (exp->find && !(exp->opt & COLON))
srcs/word_expansion/sh_word_expression.c:130:		exp->value = NULL;
srcs/word_expansion/sh_word_expression.c:134:		exp->opt = ERROR;
srcs/word_expansion/sh_word_expression.c:140:	exp->i++;
srcs/word_expansion/sh_word_expression.c:141:	if ((!(exp->opt & COLON) && exp->find && !exp->find)
srcs/word_expansion/sh_word_expression.c:142:			|| (exp->find && exp->find->value))
srcs/word_expansion/sh_word_expression.c:148:		exp->value = NULL;
srcs/word_expansion/sh_word_expression.c:153:	if (exp->content[exp->i] == ':')
srcs/word_expansion/sh_word_expression.c:155:		exp->i++;
srcs/word_expansion/sh_word_expression.c:156:		exp->opt = COLON;
srcs/word_expansion/sh_word_expression.c:158:	if (exp->content[exp->i] == '-')
srcs/word_expansion/sh_word_expression.c:160:	else if (exp->content[exp->i] == '=')
srcs/word_expansion/sh_word_expression.c:162:	else if (exp->content[exp->i] == '?')
srcs/word_expansion/sh_word_expression.c:164:	else if (exp->content[exp->i] == '+')
srcs/word_expansion/sh_word_expression.c:166:	else if (exp->find && exp->find->value)
srcs/word_expansion/sh_word_expression.c:167:		exp->value = ft_strdup(exp->find->value);
srcs/word_expansion/sh_word_expression.c:172:	while (exp->find && ft_strcmp(exp->name, exp->find->key) != 0)
srcs/word_expansion/sh_word_expression.c:173:		exp->find = exp->find->next;
srcs/word_expansion/sh_word_expression.c:182:	cpy = exp->i;
srcs/word_expansion/sh_word_expression.c:183:	while (exp->content[cpy] != ':' && exp->content[cpy] != '-'
srcs/word_expansion/sh_word_expression.c:184:			&& exp->content[cpy] != '=' && exp->content[cpy] != '?'
srcs/word_expansion/sh_word_expression.c:185:			&& exp->content[cpy] != '+' && exp->content[cpy] != '#'
srcs/word_expansion/sh_word_expression.c:186:			&& exp->content[cpy] != '%' && exp->content[cpy] != '}'
srcs/word_expansion/sh_word_expression.c:187:			&& exp->content[cpy] != '$' && exp->content[cpy] != '/'
srcs/word_expansion/sh_word_expression.c:188:			&& exp->content[cpy] != '"' && exp->content[cpy])
srcs/word_expansion/sh_word_expression.c:190:	if (!(exp->name = malloc(cpy - exp->i)))
srcs/word_expansion/sh_word_expression.c:191:		exit(-1);
srcs/word_expansion/sh_word_expression.c:192:	while (exp->content[exp->i] != ':' && exp->content[exp->i] != '-'
srcs/word_expansion/sh_word_expression.c:193:			&& exp->content[exp->i] != '=' && exp->content[exp->i] != '?'
srcs/word_expansion/sh_word_expression.c:194:			&& exp->content[exp->i] != '+' && exp->content[exp->i] != '#'
srcs/word_expansion/sh_word_expression.c:195:			&& exp->content[exp->i] != '%' && exp->content[exp->i] != '}'
srcs/word_expansion/sh_word_expression.c:196:			&& exp->content[exp->i] != '$' && exp->content[exp->i] != '/'
srcs/word_expansion/sh_word_expression.c:197:			&& exp->content[exp->i] != '"' && exp->content[exp->i])
srcs/word_expansion/sh_word_expression.c:198:		exp->name[i_sub++] = exp->content[exp->i++];
srcs/word_expansion/sh_word_expression.c:199:	exp->name[i_sub] = '\0';
srcs/word_expansion/sh_word_expression.c:200:	printf("%s\n", exp->name);
srcs/word_expansion/sh_word_expression.c:202:	if (exp->find)
srcs/word_expansion/sh_word_expression.c:208:	if (exp->content[exp->i] == '{')
srcs/word_expansion/sh_word_expression.c:209:		exp->i++;
srcs/word_expansion/sh_word_expression.c:210:	if (exp->content[exp->i] == '#')
srcs/word_expansion/sh_word_expression.c:212:		exp->opt = exp->opt + LEN;
srcs/word_expansion/sh_word_expression.c:213:		exp->i++;
unit_tests/tests/21sh.utest:7:/bin/ls -laF
unit_tests/tests/21sh.utest:8:/bin/ls -l -a -F
unit_tests/tests/21sh.utest:18:cd - && pwd
unit_tests/tests/21sh.utest:52:ls | cat -e
unit_tests/tests/21sh.utest:53:ls | sort | cat -e
unit_tests/tests/21sh.utest:54:base64 /dev/urandom | head -c 1000 | grep 42 | wc -l | sed -e s/1/Yes/g -e s/0/No/g
unit_tests/tests/21sh.utest:58:ls -1 >/tmp/test_file ; ls -1 /tmp ;
unit_tests/tests/21sh.utest:59:ls -1 >>/tmp/test_file ; cat /tmp/test_file ; ls -1 >> /tmp/test_file ; cat /tmp/test_file
unit_tests/tests/21sh.utest:60:ls -1 >/tmp/test_file ; cat /tmp/test_file ; ls -1 > /tmp/test_file ; cat /tmp/test_file
unit_tests/tests/21sh.utest:61:ls -l && ls
unit_tests/tests/42sh.utest:7:/bin/ls -laF
unit_tests/tests/42sh.utest:8:/bin/ls -l -a -F
unit_tests/tests/42sh.utest:18:cd - && pwd
unit_tests/tests/42sh.utest:52:ls | cat -e
unit_tests/tests/42sh.utest:53:ls | sort | cat -e
unit_tests/tests/42sh.utest:54:base64 /dev/urandom | head -c 1000 | grep 42 | wc -l | sed -e s/1/Yes/g -e s/0/No/g
unit_tests/tests/42sh.utest:60:ls -1 >/tmp/test_file; ls -1 /tmp/test_file ;
unit_tests/tests/42sh.utest:61:ls -1 >>/tmp/test_file ; cat /tmp/test_file ; ls -1 >>/tmp/test_file ; cat /tmp/test_file
unit_tests/tests/42sh.utest:62:ls -1 >/tmp/test_file ; cat /tmp/test_file ; ls -1 >/tmp/test_file ; cat /tmp/test_file
unit_tests/tests/42sh.utest:63:ls -l && ls
unit_tests/tests/42sh.utest:66:echo "Testing redirections," > /tmp/test_file ; cat /tmp/test_file ; echo "Testing redirections," > /tmp/test_file ; cat /tmp/test_file ; wc -c < /tmp/test_file ; ls /tmp/test_file ; ls /tmp
unit_tests/tests/42sh.utest:67:ls nosuchfile 2>&-
unit_tests/tests/42sh.utest:68:ls >&-
unit_tests/tests/42sh.utest:69:ls nosuchfile 2>&-
unit_tests/tests/42sh.utest:70:echo "No dollar character" 1>&2 | cat -e
unit_tests/tests/42sh.utest:71:mkdir test ; cd test ; ls -a ; ls | cat | wc -c > fifi ; cat fifi
unit_tests/tests/42sh.utest:72:mkdir test ; cd test ; ls -a ; ls | cat | wc -c > fifi ; cat fifi ; ls; ls -rf test; ls
unit_tests/tests/minishell.utest:6:/bin/ls -laF
unit_tests/tests/minishell.utest:7:/bin/ls -l -a -F
unit_tests/tests/minishell.utest:17:cd - && pwd
unit_tests/tests/test_echo.utest:1:test -z '' ; echo $?
unit_tests/tests/test_echo.utest:2:test -z 'alala' ; echo $?
unit_tests/tests/test_echo.utest:3:test -d '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:4:test -d '/tmp/johnsnow' ; echo $?
unit_tests/tests/test_echo.utest:5:test -e '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:6:test -e '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:7:test -f '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:8:test -f '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:9:test -b '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:10:test -b '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:11:test -f '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:12:test -f '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:17:test 42 -eq 42 ; echo $?
unit_tests/tests/test_echo.utest:18:test 101 -eq 42 ; echo $?
unit_tests/tests/test_echo.utest:19:test 42 -ne 42 ; echo $?
unit_tests/tests/test_echo.utest:20:test 101 -ne 42 ; echo $?
unit_tests/tests/test_echo.utest:21:test 42 -ge 42 ; echo $?
unit_tests/tests/test_echo.utest:22:test 101 -ge 42 ; echo $?
unit_tests/tests/test_echo.utest:23:test 19 -ge 42 ; echo $?
unit_tests/tests/test_echo.utest:24:test 42 -gt 42 ; echo $?
unit_tests/tests/test_echo.utest:25:test 101 -gt 42 ; echo $?
unit_tests/tests/test_echo.utest:26:test 19 -gt 42 ; echo $?
unit_tests/tests/test_echo.utest:27:test 42 -le 42 ; echo $?
unit_tests/tests/test_echo.utest:28:test 101 -le 42 ; echo $?
unit_tests/tests/test_echo.utest:29:test 19 -le 42 ; echo $?
unit_tests/tests/test_echo.utest:30:test 42 -lt 42 ; echo $?
unit_tests/tests/test_echo.utest:31:test 101 -lt 42 ; echo $?
unit_tests/tests/test_echo.utest:32:test 19 -lt 42 ; echo $?
unit_tests/tests/test_echo.utest:33:test ! -z '' ; echo $?
unit_tests/tests/test_echo.utest:34:test ! -z 'alala' ; echo $?
unit_tests/tests/test_echo.utest:35:test ! -d '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:36:test ! -d '/tmp/johnsnow' ; echo $?
unit_tests/tests/test_echo.utest:37:test ! -e '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:38:test ! -e '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:39:test ! -f '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:40:test ! -f '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:41:test ! -b '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:42:test ! -b '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:43:test ! -f '/tmp' ; echo $?
unit_tests/tests/test_echo.utest:44:test ! -f '/tmp/hghgghfhgfhgcb' ; echo $?
unit_tests/tests/test_echo.utest:49:test ! 42 -eq 42 ; echo $?
unit_tests/tests/test_echo.utest:50:test ! 101 -eq 42 ; echo $?
unit_tests/tests/test_echo.utest:51:test ! 42 -ne 42 ; echo $?
unit_tests/tests/test_echo.utest:52:test ! 101 -ne 42 ; echo $?
unit_tests/tests/test_echo.utest:53:test ! 42 -ge 42 ; echo $?
unit_tests/tests/test_echo.utest:54:test ! 101 -ge 42 ; echo $?
unit_tests/tests/test_echo.utest:55:test ! 19 -ge 42 ; echo $?
unit_tests/tests/test_echo.utest:56:test ! 42 -gt 42 ; echo $?
unit_tests/tests/test_echo.utest:57:test ! 101 -gt 42 ; echo $?
unit_tests/tests/test_echo.utest:58:test ! 19 -gt 42 ; echo $?
unit_tests/tests/test_echo.utest:59:test ! 42 -le 42 ; echo $?
unit_tests/tests/test_echo.utest:60:test ! 101 -le 42 ; echo $?
unit_tests/tests/test_echo.utest:61:test ! 19 -le 42 ; echo $?
unit_tests/tests/test_echo.utest:62:test ! 42 -lt 42 ; echo $?
unit_tests/tests/test_echo.utest:63:test ! 101 -lt 42 ; echo $?
unit_tests/tests/test_echo.utest:64:test ! 19 -lt 42 ; echo $?
unit_tests/tests/test_if.utest:1:if test -z '' ; then echo ok ; fi
unit_tests/tests/test_if.utest:2:if test -z 'alala' ; then echo ok ; fi
unit_tests/tests/test_if.utest:3:if test -d '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:4:if test -d '/tmp/johnsnow' ; then echo ok ; fi
unit_tests/tests/test_if.utest:5:if test -e '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:6:if test -e '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:7:if test -f '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:8:if test -f '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:9:if test -b '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:10:if test -b '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:11:if test -f '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:12:if test -f '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:17:if test 42 -eq 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:18:if test 101 -eq 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:19:if test 42 -ne 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:20:if test 101 -ne 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:21:if test 42 -ge 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:22:if test 101 -ge 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:23:if test 19 -ge 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:24:if test 42 -gt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:25:if test 101 -gt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:26:if test 19 -gt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:27:if test 42 -le 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:28:if test 101 -le 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:29:if test 19 -le 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:30:if test 42 -lt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:31:if test 101 -lt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:32:if test 19 -lt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:33:if test ! -z '' ; then echo ok ; fi
unit_tests/tests/test_if.utest:34:if test ! -z 'alala' ; then echo ok ; fi
unit_tests/tests/test_if.utest:35:if test ! -d '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:36:if test ! -d '/tmp/johnsnow' ; then echo ok ; fi
unit_tests/tests/test_if.utest:37:if test ! -e '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:38:if test ! -e '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:39:if test ! -f '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:40:if test ! -f '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:41:if test ! -b '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:42:if test ! -b '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:43:if test ! -f '/tmp' ; then echo ok ; fi
unit_tests/tests/test_if.utest:44:if test ! -f '/tmp/hghgghfhgfhgcb' ; then echo ok ; fi
unit_tests/tests/test_if.utest:49:if test ! 42 -eq 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:50:if test ! 101 -eq 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:51:if test ! 42 -ne 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:52:if test ! 101 -ne 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:53:if test ! 42 -ge 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:54:if test ! 101 -ge 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:55:if test ! 19 -ge 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:56:if test ! 42 -gt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:57:if test ! 101 -gt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:58:if test ! 19 -gt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:59:if test ! 42 -le 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:60:if test ! 101 -le 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:61:if test ! 19 -le 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:62:if test ! 101 -lt 42 ; then echo ok ; fi
unit_tests/tests/test_if.utest:63:if test ! 19 -lt 42 ; then echo ok ; fi
